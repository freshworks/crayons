/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AccordionToggleEvent } from "./components/accordion/accordion";
import { CountryCode } from "libphonenumber-js/types";
import { DataTableAction, DataTableActionWithGraphics, DataTableColumn, DataTableRow, DropdownVariant, MetaText, PopoverPlacementType, PopoverTriggerType, TagState, TagVariant, WidthStyles } from "./utils/types";
import { InitialUploaderFile, UploaderFile } from "./components/file-uploader-2/file-uploader2-util";
import { FormErrors, FormRequired, FormSubmit, FormValues } from "./components/form/form-declaration";
import { ToastOptions } from "./components/toast/toast-util";
export namespace Components {
    interface FwAccordion {
        /**
          * To manage accordion expanded or collapsed state
         */
        "expanded": boolean;
        /**
          * Method available from the component to toggle expanded or collapsed state of accordion
          * @returns promise that resolves to true
         */
        "toggle": () => Promise<boolean>;
        /**
          * The type of accordion to be displayed. default => Accordion with all borders no_bounding_box => Accordion with top and bottom borders only
         */
        "type": 'default' | 'no_bounding_box';
    }
    interface FwAccordionBody {
        "expanded": boolean;
        "type": 'default' | 'no_bounding_box';
    }
    interface FwAccordionTitle {
        "expanded": boolean;
        /**
          * The size of the default icon
         */
        "iconSize": 'small' | 'medium' | 'large';
        "toggleState": any;
        /**
          * Truncate title on text overflow
         */
        "truncateOnOverflow": boolean;
        "type": 'default' | 'no_bounding_box';
    }
    interface FwAvatar {
        "alt": string;
        "image": string;
        "initials": string;
        "mode": 'dark' | 'light' | 'error';
        "name": string;
        "shape": 'circle' | 'square' | 'rounded';
        "size": | 'xxlarge'
    | 'xlarge'
    | 'large'
    | 'medium'
    | 'small'
    | 'xsmall'
    | 'xxsmall';
    }
    interface FwButton {
        /**
          * Identifier of  the theme based on which the button is styled.
         */
        "color": 'primary' | 'secondary' | 'danger' | 'link' | 'text';
        /**
          * Disables the button on the interface. Default value is false.
         */
        "disabled": boolean;
        /**
          * Accepts the id of the fw-file-uploader component to upload the file.
         */
        "fileUploaderId": string;
        /**
          * Loading state for the button, Default value is false.
         */
        "loading": boolean;
        /**
          * Accepts the id of the fw-modal component to open it on click.
         */
        "modalTriggerId": string;
        "setFocus": () => Promise<any>;
        /**
          * Caret indicator for the button, Default value is false.
         */
        "showCaretIcon": boolean;
        /**
          * Size of the button.
         */
        "size": 'normal' | 'small' | 'icon' | 'icon-small';
        /**
          * Sets the delay for throttle in milliseconds. Defaults to 200 milliseconds.
         */
        "throttleDelay": number;
        /**
          * Button type based on which actions are performed when the button is clicked.
         */
        "type": 'button' | 'submit';
    }
    interface FwButtonGroup {
        "label": string;
    }
    interface FwCheckbox {
        /**
          * Sets the state of the check box to selected. If the attribute’s value is undefined, the value is set to false.
         */
        "checked": boolean;
        /**
          * Description to be displayed for the checkbox.
         */
        "description": string;
        /**
          * Disables the check box on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled": boolean;
        /**
          * Error text displayed below the radio group.
         */
        "errorText": string;
        /**
          * /**   Hint text displayed below the radio group.
         */
        "hintText": string;
        /**
          * @deprecated Use `description` instead. Label displayed on the interface, for the check box.
         */
        "label": string;
        /**
          * Name of the component, saved as part of form data.
         */
        "name": string;
        /**
          * Specifies the input box as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.
         */
        "required": boolean;
        /**
          * Sets focus on a `fw-checkbox`.
         */
        "setFocus": () => Promise<void>;
        /**
          * Theme based on which the checkbox is styled.
         */
        "state": 'normal' | 'warning' | 'error';
        /**
          * Identifier corresponding to the component, that is saved when the form data is saved.
         */
        "value": string;
        /**
          * Warning text displayed below the radio group.
         */
        "warningText": string;
    }
    interface FwCountryPhone {
        /**
          * Displays a right-justified clear icon in the text box. Clicking the icon clears the input text. If the attribute’s value is undefined, the value is set to false. For a read-only input box, the clear icon is not displayed unless a default value is specified for the input box.
         */
        "clearInput": boolean;
        /**
          * Default countryCode to be displayed.
         */
        "countryCodeDefaultValue": string;
        /**
          * Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled": boolean;
        /**
          * Error text displayed below the text box.
         */
        "errorText": string;
        /**
          * Hide Country Flag in the Country Select
         */
        "hideCountryFlag": boolean;
        /**
          * Hide Country Name in the Country Select
         */
        "hideCountryName": boolean;
        /**
          * Hint text displayed below the text box.
         */
        "hintText": string;
        /**
          * * Label displayed on the interface, for the input component.
         */
        "inputLabel"?: string | null;
        /**
          * Text displayed in the text box before a user enters a value.
         */
        "inputPlaceholder"?: string | null;
        /**
          * Checks PhoneNumber is Valid or Not
          * @param value PhoneNumber
          * @param countryCode
          * @returns after validation PhoneNumber with countryCode
         */
        "isValidPhoneNumber": (value: string, countryCode: CountryCode) => Promise<boolean>;
        /**
          * Name of the component, saved as part of form data.
         */
        "name": string;
        /**
          * Validates PhoneNumber provided and return extra details
          * @param value PhoneNumber
          * @returns {countryCode, countryCallingCode, nationalNumber,  number, metadata }
         */
        "parsePhoneNumber": (...args: any[]) => Promise<any>;
        /**
          * If true, the user cannot enter a value in the input box. If the attribute’s value is undefined, the value is set to false.
         */
        "readonly": boolean;
        /**
          * Specifies the input box as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.
         */
        "required": boolean;
        /**
          * * Label displayed on the interface, for the input component.
         */
        "selectLabel"?: string | null;
        /**
          * Text displayed in the text box before a user enters a value.
         */
        "selectPlaceholder"?: string | null;
        /**
          * Theme based on which the text box is styled.
         */
        "state": 'normal' | 'warning' | 'error';
        /**
          * Default value displayed in the input box & select dropdown after extracting valid phone number
         */
        "value"?: string | null;
        /**
          * Warning text displayed below the text box.
         */
        "warningText": string;
    }
    interface FwCustomCellAnchor {
        "href": string;
        "target": string;
        "text": string;
    }
    interface FwCustomCellIcon {
        "color": string;
        "library": string;
        "name": string;
        "size": number;
        "src": any;
    }
    interface FwCustomCellParagraph {
        /**
          * text to display inside the cell
         */
        "text": string;
    }
    interface FwCustomCellUser {
        "alt": string;
        "email": string;
        "image": any;
        "name": string;
    }
    interface FwDataTable {
        /**
          * autoSaveSettings to enable auto saving of table settings to `localstorage`. If set to `true`, make sure `id` attribute is also set to the `data-table`
         */
        "autoSaveSettings": boolean;
        /**
          * Columns Array of objects that provides information regarding the columns in the table.
         */
        "columns": DataTableColumn[];
        /**
          * getSelectedIds
          * @returns an array of selected row IDs
         */
        "getSelectedIds": () => Promise<string[]>;
        /**
          * getSelectedRows
          * @returns selected rows from the data table
         */
        "getSelectedRows": () => Promise<DataTableRow[]>;
        /**
          * getTableSettings
          * @returns columnConfig object
         */
        "getTableSettings": () => Promise<{}>;
        /**
          * isAllSelectable Boolean based on which select all option appears in the table header
         */
        "isAllSelectable": boolean;
        /**
          * To disable table during async operations
         */
        "isLoading": boolean;
        /**
          * isSelectable Boolean based on which selectable options appears for rows in the table.
         */
        "isSelectable": boolean;
        /**
          * Label attribute is not visible on screen. There for accessibility purposes.
         */
        "label": string;
        /**
          * loadTable - Method to call when we want to change table loading state
          * @param state to load table or not
          * @returns isLoading current state
         */
        "loadTable": (state?: boolean) => Promise<boolean>;
        /**
          * To enable bulk actions on the table.
         */
        "rowActions": | DataTableAction[]
    | DataTableActionWithGraphics[];
        /**
          * Header label for row actions column
         */
        "rowActionsHeaderLabel": any;
        /**
          * Standard is the default option without any graphics other option is icon which places the icon at the beginning of the row. The props for the icon are passed as iconName and iconLibrary via the rowActions prop.
         */
        "rowActionsMenuVariant": 'standard' | 'icon';
        /**
          * Ability to add width related properties to rowActions. Helps solve settings icon overlap with actions label.
         */
        "rowActionsWidthProperties": null | WidthStyles;
        /**
          * Rows Array of objects to be displayed in the table.
         */
        "rows": DataTableRow[];
        /**
          * selectAllRows method we can use to select/unselect rows in the table
          * @param checked denotes if we want to check or uncheck the rows
         */
        "selectAllRows": (checked?: boolean) => Promise<string[]>;
        /**
          * setTableSettings
          * @param columnConfig columnConfig object
         */
        "setTableSettings": (columnConfig: any) => Promise<DataTableColumn[]>;
        /**
          * shimmerCount number of shimmer rows to show during initial loading
         */
        "shimmerCount": number;
        /**
          * To show row actions as a kebab menu
         */
        "showRowActionsAsMenu": boolean;
        /**
          * showSettings is used to show the settings button on the table.
         */
        "showSettings": boolean;
    }
    interface FwDatepicker {
        "cancelText": string;
        /**
          * Displays a clear icon in the text box. Clicking the icon clears the value. Default `false`
         */
        "clearInput": boolean;
        /**
          * Clears the input value and unselects selected date.
         */
        "clearValue": () => Promise<void>;
        /**
          * Debounce timer for date input.
         */
        "debounceTimer": number;
        /**
          * Make the datepicker box as disabled. Default `false`
         */
        "disabled": boolean;
        /**
          * Format in which the date values selected in the calendar are populated in the input box. Defaults to the locale specific display format.
         */
        "displayFormat": string;
        /**
          * Error text displayed below the text box.
         */
        "errorText": string;
        /**
          * Starting date of the date range that is preselected in the calendar, if mode is range. Must be a date later than the min-date value and valid ISO date format.
         */
        "fromDate": string;
        /**
          * To make the datepicker occupy full width of the container. Default value is false.
         */
        "fullWidth": boolean;
        /**
          * Returns the date value in ISO format.
         */
        "getValue": () => Promise<string | { fromDate: string; toDate: string; }>;
        /**
          * Hint text displayed below the text box.
         */
        "hintText": string;
        /**
          * Option to prevent the tooltip from being clipped when the component is placed inside a container with `overflow: auto|hidden|scroll`.
         */
        "hoistTooltip": boolean;
        /**
          * Label displayed on the interface, for the component.
         */
        "label": string;
        /**
          * Locale for which datepicker needs to be shown. Defaults to browser's current locale.
         */
        "locale": string;
        /**
          * Latest date a user can select in the calendar, if mode is range. Must be a valid ISO date format if set.
         */
        "maxDate": string;
        /**
          * Maximum year that needs to be displayed in the year dropdown.
         */
        "maxYear": number;
        /**
          * Earliest date a user can select in the calendar, if mode is range. Must be a valid ISO date format if set.
         */
        "minDate": string;
        /**
          * Minimum year that needs to be displayed in the year dropdown.
         */
        "minYear": number;
        /**
          * Type of date selection enabled for the calendar. If the value is range, a user can select a date range in the calendar.
         */
        "mode": 'single date' | 'range';
        /**
          * Name of the component, saved as part of form data.
         */
        "name": string;
        /**
          * Text displayed in the input box before a user selects a date or date range.
         */
        "placeholder": string;
        /**
          * Make the input box as readonly. Default `false`
         */
        "readonly": boolean;
        /**
          * Specifies the input box as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.
         */
        "required": boolean;
        /**
          * Sets focus on a specific `fw-datepicker`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * Displays alert icon and tooltip when user inputs an invalid date in the textbox. Default value is true.
         */
        "showErrorOnInvalidDate": boolean;
        /**
          * Indicates if footer needs to be shown. Default `true`.
         */
        "showFooter": boolean;
        /**
          * Whether the time-picker should be shown in the date-picker. Supports single date picker only.
         */
        "showTimePicker": boolean;
        /**
          * Theme based on which the input of the datepicker is styled.
         */
        "state": 'normal' | 'warning' | 'error';
        /**
          * The format of time picker .
         */
        "timeFormat": string;
        /**
          * The props for the time picker. Refer the fw-timepicker for valid format.
         */
        "timeProps": {};
        /**
          * Ending date of the date range that is preselected in the calendar, if mode is range. Must be a date earlier than the max-date value and valid ISO date format.
         */
        "toDate": string;
        /**
          * Error text displayed on the tooltip for invalid date inputs.
         */
        "tooltipErrorText": any;
        "updateText": string;
        /**
          * Date that is preselected in the calendar, if mode is single date or undefined. If set this must be valid ISO date format.
         */
        "value": string;
        /**
          * Warning text displayed below the text box.
         */
        "warningText": string;
    }
    interface FwDragContainer {
        /**
          * Id of the fw-sortable element from which draggable content can be accepted. Add comma separated id's for multiple containers.
         */
        "acceptFrom": string;
        /**
          * Whether the drag element should be added to the container on drop. If set to false, the placeholder will be retained.
         */
        "addOnDrop": boolean;
        /**
          * Whether the drag element should be moved or copied.
         */
        "copy": boolean;
        /**
          * The class name for the drag/drop placeholder. Add space separated class names for multiple classes
         */
        "placeholderClass": string;
        /**
          * Whether the list should be sortable.
         */
        "sortable": boolean;
    }
    interface FwDragItem {
        /**
          * Whether the drag is disabled or not.
         */
        "disabled": boolean;
        /**
          * Pinned position of the drag item, other drag item cannot be placed above or below it.
         */
        "pinned": 'top' | 'bottom';
        /**
          * Whether the drag icon should be visible.
         */
        "showDragIcon": boolean;
    }
    interface FwFile2 {
        /**
          * Boolean value to set if the attachment is added in library or not
         */
        "addedToLibrary": boolean;
        /**
          * To enable library adding related feature
         */
        "enableLibraryAdding": boolean;
        /**
          * Error message text to display below the attachment
         */
        "errorMessage": string;
        /**
          * Index order of the attachment file starting from 0
         */
        "index": number;
        /**
          * Set private mode for different styles
         */
        "isPrivateMode": boolean;
        /**
          * Name of the attachment file to be displayed (including the file extension)
         */
        "label": string;
        /**
          * Boolean used to display size as passed or convert them to relatives like KB, MB etc...
         */
        "parseSize": boolean;
        /**
          * Size of the attachment in bytes
         */
        "size": number;
        /**
          * State of the attachment for styling
         */
        "state": 'normal' | 'loading' | 'error' | 'failed';
        /**
          * File type
         */
        "type": string | null;
        /**
          * Value or id related to the attached file
         */
        "value": any;
    }
    interface FwFileUploader {
        /**
          * accept - comma separated string. tells us what file formats file uploader should accept.
         */
        "accept": string;
        /**
          * acceptError - Error message to display when format is invalid.
         */
        "acceptError": any;
        /**
          * actionParams - additional information to send to server other than the file.
         */
        "actionParams": any;
        /**
          * actionURL - URL to make server call.
         */
        "actionURL": string;
        /**
          * description - file uploader description.
         */
        "description": any;
        /**
          * fileUploadError - Error message when a file upload fails.
         */
        "fileUploadError": any;
        /**
          * Max files allowed to upload.
         */
        "filesLimit": number;
        /**
          * get all locally available files in the component
          * @returns FileList of all locally available files in the component
         */
        "getFiles": () => Promise<FileList>;
        /**
          * hint - file uploader hint text.
         */
        "hint": string;
        /**
          * maxFileSize - maximum file size the file uploader must accept.
         */
        "maxFileSize": number;
        /**
          * maxFileSizeError - Error message to display when file size exceeds limit
         */
        "maxFileSizeError": any;
        /**
          * maxFilesLimitError - Error message when going beyond files limit.
         */
        "maxFilesLimitError": any;
        /**
          * modify request
          * @param xhr
          * @returns xhr
         */
        "modifyRequest": (xhr: any) => any;
        /**
          * multiple - upload multiple files.
         */
        "multiple": boolean;
        /**
          * name - field name
         */
        "name": string;
        /**
          * reset file uploader
         */
        "reset": () => Promise<void>;
        /**
          * text - file uploader text.
         */
        "text": any;
        /**
          * uploadFiles - uploads the files to the server. emits an after file is uploaded.
         */
        "uploadFiles": () => Promise<void>;
    }
    interface FwFileUploader2 {
        /**
          * accept - comma separated string. tells us what file formats file uploader should accept.
         */
        "accept": string;
        /**
          * acceptError - Error message to display when format is invalid.
         */
        "acceptError": any;
        /**
          * actionParams - additional information to send to server other than the file.
         */
        "actionParams": { [prop: string]: any };
        /**
          * actionURL - URL to make server call.
         */
        "actionURL": string;
        /**
          * description - file uploader description.
         */
        "description": any;
        /**
          * errorText - errorText collection. Mutable as this can be set from form control too based on form validations.
         */
        "errorText": string;
        /**
          * fileUploadError - Error message when a file upload fails.
         */
        "fileUploadError": any;
        /**
          * Max files allowed to upload.
         */
        "filesLimit": number;
        /**
          * get all locally available files in the component
          * @returns FileList of all locally available files in the component
         */
        "getFiles": () => Promise<UploaderFile[]>;
        "getFilesList": () => Promise<FileList>;
        /**
          * Use this prop to show the label on the component.
         */
        "hideLabel": boolean;
        /**
          * Inline information text, hint text.
         */
        "hintText": string;
        /**
          * to load default values in file uploader component.
         */
        "initialFiles": InitialUploaderFile[];
        /**
          * Upload all files in one single shot
         */
        "isBatchUpload": boolean;
        /**
          * To maintain the same label styling as other form elements.
         */
        "isFormLabel": boolean;
        /**
          * maxFileSize - maximum file size the file uploader must accept.
         */
        "maxFileSize": number;
        /**
          * maxFileSizeError - Error message to display when file size exceeds limit
         */
        "maxFileSizeError": any;
        /**
          * maxFilesLimitError - Error message when going beyond files limit.
         */
        "maxFilesLimitError": any;
        /**
          * modify request
          * @param xhr
          * @returns xhr
         */
        "modifyRequest": (xhr: XMLHttpRequest) => XMLHttpRequest;
        /**
          * multiple - upload multiple files.
         */
        "multiple": boolean;
        /**
          * name - field name
         */
        "name": string;
        /**
          * field acts as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.
         */
        "required": boolean;
        /**
          * reset file uploader
         */
        "reset": () => Promise<void>;
        /**
          * restrict the width of the attachment in the file uploader
         */
        "restrictAttachmentBlock": boolean;
        "setFocus": () => Promise<void>;
        /**
          * Use a simple interface for the single file mode.
         */
        "simpleInterfaceForSingleMode": boolean;
        /**
          * text - file uploader text.
         */
        "text": any;
        /**
          * Max total size allowed for upload
         */
        "totalFileSizeAllowed": number;
        /**
          * totalFileSizeAllowedError - Total file size (combination of all files) allowed for upload.
         */
        "totalFileSizeAllowedError": any;
        /**
          * uploadFile
          * @param fileId
          * @returns fileUploadPromise
         */
        "uploadFiles": () => Promise<void>;
    }
    interface FwFileUploaderFile {
        /**
          * file Id
         */
        "fileId": number;
        /**
          * file name
         */
        "name": string;
    }
    interface FwFileUploaderProgress {
        /**
          * error text for the file upload
         */
        "error": string;
        /**
          * file Id
         */
        "fileId": number;
        /**
          * file name
         */
        "fileName": string;
        /**
          * file upload progress
         */
        "progress": number;
    }
    interface FwForm {
        /**
          * A custom type mapper object that maps the type of your fields in the schema to the Internal Field Types. Internal Field Types are `TEXT`, `DROPDOWN`, `EMAIL` etc. In the example below, `1` is the type of a field in your schema that needs to correspond to `TEXT` type. Please pass include the mapper for all the field types that you want to support. Example typeMapper object : {      'CUSTOM_TEXT': { type: 'TEXT' },      'SELECT': { type: 'DROPDOWN' },      'TEL': { type: 'PHONE_NUMBER' },      'CHECKBOX': { type: 'CHECKBOX' },      'TEXTAREA': { type: 'PARAGRAPH' },      'DATETIME': { type: 'DATE_TIME' },      'INTEGER': { type: 'NUMBER' },    }
         */
        "customTypeMapper": any;
        /**
          * @param event - An event which takes place in the DOM  Method to reset the form
         */
        "doReset": (event?: any) => Promise<void>;
        /**
          * @param event : An event which takes place in the DOM  Method to submit the form
         */
        "doSubmit": (event?: any) => Promise<FormSubmit>;
        /**
          * Id to uniquely identify the Form. If not set, a random Id will be generated.
         */
        "formId": any;
        /**
          * Schema to render Dynamic Form. Contains an array of fields pointing to each form control. Please see the usage reference for examples.
         */
        "formSchema"?: any;
        /**
          * getValues
          * @returns An Object containing values and serializedValues. serializedValues are those that contains the transformed values based on field type. 1. For Number and Decimal: returns floating point number of value or undefined. 2. For Date: returns value as ${year}-${month}-${date} or undefined. 3. For Relationship : returns an array of values or value.
         */
        "getValues": () => Promise<{ values: FormValues; serializedValues: FormValues; }>;
        /**
          * Initial field values of the form. It is an object with keys pointing to field name
         */
        "initialValues"?: any;
        /**
          * Mapper Type - LEGO | FORMSERV | CUSTOM. Defaults to `LEGO`.
         */
        "mapperType": 'LEGO' | 'FORMSERV' | 'CUSTOM';
        /**
          * Method to set disabled fields on the form dynamically.  Note: You must always pass all the fields that you want to disable  param: disabledFields - key value pair of [fieldName]: true | false example: `setDisabledFields({ first_name: true, last_name: false })`
         */
        "setDisabledFields": (disabledFields?: any) => Promise<void>;
        /**
          * setFieldChoices Method to set field choices for a DROPDOWN/MULTI_SELECT/RADIO fields in formschema. choices must be in the form of array with the below format: [{  id: 1,  value: 'open',  position: 1,  dependent_ids: {}, }]. fieldOptions is an optional parameter, must be an object with keys being option_label_path and option_value_path. option_label_path refers to the key used for displaying the text. option_value_path refers to the key which corresponds to the value of item.
         */
        "setFieldChoices": (field: string, choices: Array<any>, fieldOptions?: any) => Promise<void>;
        /**
          * Method to set errors on the form fields.  If you use `setErrors`, your errors will be wiped out by next `validate` or `validationSchema` call which can be triggered by the user typing (a change event) or blurring an input (a blur event). Note: this assumed you have not manually set `validateOnInput` and `validateOnBlur` props to `false` (they are `true` by default).  param: errorObj - key value pair of [fieldName]: ErrorMessage example: `{ first_name: 'firstname is required' }`
         */
        "setFieldErrors": (errorObj: FormErrors<FormValues>) => Promise<void>;
        /**
          * Method to filter the display of fields in the form based on the passed text.
          * @param text
         */
        "setFieldSearchText": (text: string) => Promise<void>;
        /**
          * Method to set value on the form field.  param: field - name of the form field param: value - value of the form field param: shouldValidate - should this form field be validated with the updated value. Default to true.
         */
        "setFieldValue": (field: string, value: any, shouldValidate?: boolean) => Promise<void>;
        /**
          * Method to set required status on form fields  param: requiredStatusObj - Object with key as form field name and value denoting if the field should be marked as required or not example: `{ first_name: true, last_name: false }`
         */
        "setFieldsRequiredStatus": (requiredStatusObj: FormRequired<FormValues>) => Promise<void>;
        /**
          * Method to set values on the form fields.  param: valuesObj - Object with key as form field name and value as the updated value for the field example: `{ first_name: "new name", last_name: "new last name" }` param: shouldValidate - should this form be validated with the updated values. Default to true.
         */
        "setFieldsValue": (valuesObj: FormValues, shouldValidate?: boolean) => Promise<void>;
        /**
          * Method to set hidden fields on the form dynamically.  Note: You must always pass all the fields that you want to hide. Also, note that the validation for hidden fields will be skipped.  param: hiddenFields - key value pair of [fieldName]: true | false example: `setHiddenFields({ first_name: true, last_name: false })`
         */
        "setHiddenFields": (hiddenFields?: any) => Promise<void>;
        /**
          * Validate the form's values with an async function. Should return a Promise which resolves to an errors object. The keys in the errors object must match with the field names.
         */
        "validate"?: any;
        /**
          * Tells Form to validate the form on each input's onBlur event
         */
        "validateOnBlur"?: boolean;
        /**
          * Tells Form to validate the form on each input's onInput event
         */
        "validateOnInput"?: boolean;
        /**
          * YUP based validation schema for handling validation
         */
        "validationSchema"?: any;
        /**
          * The number of milliseconds to delay before doing validation on Input
         */
        "wait": number;
    }
    interface FwFormControl {
        "choices": any;
        /**
          * Contains values for crayons components. Useful when rendering crayons components implicitly via form-control. Not required when using controls via slots.
         */
        "controlProps"?: any;
        /**
          * Disable the field from being editable
         */
        "disabled": boolean;
        "error": string;
        /**
          * Additional props can be passed here for crayons components. Useful when rendering crayons components implicitly via form-control.
         */
        "fieldProps"?: any;
        "hidden": boolean;
        "hint": string;
        "label": any;
        "name": any;
        "placeholder": string;
        "required": boolean;
        /**
          * Set Focus on the child
         */
        "setFocus": () => Promise<void>;
        /**
          * Prop to determine whether to render the form-control or not. Default to true.
         */
        "shouldRender": boolean;
        "touched": boolean;
        "type": | 'TEXT'
    | 'NUMBER'
    | 'DECIMAL'
    | 'DROPDOWN'
    | 'MULTI_SELECT'
    | 'RADIO'
    | 'CHECKBOX'
    | 'DATE'
    | 'PARAGRAPH'
    | 'EMAIL'
    | 'URL'
    | 'TEL'
    | 'TIME'
    | 'DATE_TIME'
    | 'RELATIONSHIP'
    | 'AUTO_COMPLETE'
    | 'DEPENDENT_FIELD'
    | 'FILES';
        /**
          * Value of the slotted custom field on fw-form-control
         */
        "value": any;
    }
    interface FwFormatDate {
        /**
          * The date/time to format. If not set, the current date and time will be used.
         */
        "date": Date | string | number;
        /**
          * The format for displaying the day.
         */
        "day": 'numeric' | '2-digit';
        /**
          * The format for displaying the hour.
         */
        "hour": 'numeric' | '2-digit';
        /**
          * When set, 24 hour time will always be used.
         */
        "hourFormat": 'auto' | '12' | '24';
        /**
          * The locale to use when formatting the date/time.
         */
        "locale": string;
        /**
          * The format for displaying the minute.
         */
        "minute": 'numeric' | '2-digit';
        /**
          * The format for displaying the month.
         */
        "month": 'numeric' | '2-digit' | 'narrow' | 'short' | 'long';
        /**
          * The format for displaying the second.
         */
        "second": 'numeric' | '2-digit';
        /**
          * The time zone to express the time in.
         */
        "timeZone": string;
        /**
          * The format for displaying the time.
         */
        "timeZoneName": 'short' | 'long';
        /**
          * The format for displaying the weekday.
         */
        "weekday": 'narrow' | 'short' | 'long';
        /**
          * The format for displaying the year.
         */
        "year": 'numeric' | '2-digit';
    }
    interface FwFormatNumber {
        /**
          * The currency to use in currency formatting. Possible values are the `ISO 4217` currency codes, such as `USD` for the US dollar, `EUR` for the euro. If the style is "currency", the currency property must be provided.
         */
        "currency": string;
        /**
          * Currency display formatting.
         */
        "currencyDisplay": 'symbol' | 'narrowSymbol' | 'code' | 'name';
        /**
          * In many locales, accounting format means to wrap the number with parentheses instead of appending a minus sign. You can enable the above by setting the currencySign option to `accounting`. The default value is `standard`
         */
        "currencySign": 'accounting' | 'standard';
        /**
          * `Locale` used for formatting the number
         */
        "locale": string;
        /**
          * The maximum number of fraction digits to use. Possible values are 0 - 20.
         */
        "maximumFractionDigits": number;
        /**
          * The maximum number of significant digits to use,. Possible values are 1 - 21. Default is 21
         */
        "maximumSignificantDigits": number;
        /**
          * The minimum number of fraction digits to use. Possible values are 0 - 20.
         */
        "minimumFractionDigits": number;
        /**
          * The minimum number of integer digits to use. Possible values are 1 - 21. Default is 1
         */
        "minimumIntegerDigits": number;
        /**
          * The minimum number of significant digits to use. Possible values are 1 - 21. Default is 1
         */
        "minimumSignificantDigits": number;
        /**
          * Formatting style
         */
        "type": 'currency' | 'decimal' | 'percent';
        /**
          * Turns on/off grouping separators.
         */
        "useGrouping": boolean;
        /**
          * Number to format.
         */
        "value": number;
    }
    interface FwIcon {
        /**
          * Color in which the icon is displayed, specified as a standard CSS color or as a HEX code.
         */
        "color": string;
        /**
          * Identifier of the icon. The attribute’s value must be a valid JS Import Name of the svg in the named export from @freshworks/crayons-icon.
         */
        "dataSvg": string;
        /**
          * Height of the icon, specified in number of  pixels.
         */
        "height": number;
        /**
          * An alternate description to use for accessibility. If omitted, the icon will be ignored by assistive devices.
         */
        "label": string;
        /**
          * Enable Intersection Observer. Default is false.
         */
        "lazy": boolean;
        /**
          * Name of External Library to be used
         */
        "library": string;
        /**
          * Identifier of the icon. The attribute’s value must be a valid svg Name in the Crayons-Icon set.
         */
        "name": string;
        /**
          * Size of the icon, specified in number of  pixels. This will be square coordinates of (w X h) = size X size
         */
        "size": number;
        /**
          * Identifier of the icon. The attribute’s value must be a valid path to svg file.
         */
        "src": string;
        /**
          * Identifier of the icon. The attribute’s value must be a valid url of the svg icon.
         */
        "url": string;
        /**
          * Width of the icon, specified in number of  pixels.
         */
        "width": number;
        /**
          * Root Margin in px or percentage for Intersection-Observer. This means from ref to bottom of loaded view , the item loads when it crosses above the negative y margin.
         */
        "xRootMargin": string;
    }
    interface FwInlineMessage {
        /**
          * Makes the inline message closable.
         */
        "closable": boolean;
        /**
          * The duration in milliseconds for which inline message will be shown.
         */
        "duration": number;
        "hide": () => Promise<void>;
        /**
          * Indicates whether the inline message is open or not.
         */
        "open": boolean;
        "show": () => Promise<void>;
        /**
          * The type of inline message to be displayed. Defaults to info.
         */
        "type": 'success' | 'warning' | 'info' | 'error';
    }
    interface FwInput {
        /**
          * Specifies whether the browser can display suggestions to autocomplete the text value.
         */
        "autocomplete": 'on' | 'off';
        /**
          * Displays a right-justified clear icon in the text box. Clicking the icon clears the input text. If the attribute’s value is undefined, the value is set to false. For a read-only input box, the clear icon is not displayed unless a default value is specified for the input box.
         */
        "clearInput": boolean;
        /**
          * Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled": boolean;
        /**
          * Error text displayed below the text box.
         */
        "errorText": string;
        /**
          * Hint text displayed below the text box.
         */
        "hintText": string;
        /**
          * Identifier of the icon that is displayed in the left side of the text box. The attribute’s value must be a valid svg file in the repo of icons (assets/icons).
         */
        "iconLeft": string;
        /**
          * Identifier of the icon that is displayed in the right side of the text box. The attribute’s value must be a valid svg file in the repo of icons (assets/icons).
         */
        "iconRight": string;
        /**
          * Label displayed on the interface, for the component.
         */
        "label": string;
        /**
          * Specifies a maximum value that can be entered for the number/decimal input.
         */
        "max"?: number;
        /**
          * Maximum number of characters a user can enter in the text box.
         */
        "maxlength"?: number;
        /**
          * Specifies a minimum value that can be entered for the number/decimal input.
         */
        "min"?: number;
        /**
          * Minimum number of characters a user must enter in the text box for the value to be valid.
         */
        "minlength"?: number;
        /**
          * Name of the component, saved as part of form data.
         */
        "name": string;
        /**
          * Text displayed in the text box before a user enters a value.
         */
        "placeholder"?: string | null;
        /**
          * If true, the user cannot enter a value in the input box. If the attribute’s value is undefined, the value is set to false.
         */
        "readonly": boolean;
        /**
          * Specifies the input box as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.
         */
        "required": boolean;
        /**
          * Sets focus on a specific `fw-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * Theme based on which the text box is styled.
         */
        "state": 'normal' | 'warning' | 'error';
        /**
          * The step attribute is used when the type is `number`. It specifies the interval between legal numbers in a number/decimal input element. Works with the min and max attributes to limit the increments at which a value can be set. Possible values are `any` or a positive floating point number. Default value is `any`
         */
        "step": string;
        /**
          * Type of value accepted as the input value. If a user enters a value other than the specified type, the input box is not populated.
         */
        "type": 'text' | 'number' | 'email' | 'url';
        /**
          * Default value displayed in the input box.
         */
        "value"?: string | null;
        /**
          * Warning text displayed below the text box.
         */
        "warningText": string;
    }
    interface FwKebabMenu {
        /**
          * The data for the kebab menu component, the options will be of type array of fw-select-options.
         */
        "options": any[];
        /**
          * Standard is the default option without any graphics other option is icon which places the icon at the beginning of the row. The props for the icon are passed as an object via the graphicsProps.
         */
        "variant": 'standard' | 'icon';
    }
    interface FwLabel {
        /**
          * Theme based on which the label is styled.
         */
        "color": 'blue' | 'red' | 'green' | 'yellow' | 'grey' | 'normal';
        /**
          * Display text in the label.
         */
        "value": string;
    }
    interface FwListOptions {
        /**
          * Whether clicking on the already selected option disables it.
         */
        "allowDeselect": boolean;
        /**
          * Whether clicking on option selects it.
         */
        "allowSelect": boolean;
        /**
          * Place a checkbox.
         */
        "checkbox": boolean;
        "clearFilter": () => Promise<void>;
        /**
          * Debounce timer for the search promise function.
         */
        "debounceTimer": number;
        /**
          * Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled": boolean;
        /**
          * Virtualize long list of elements in list options *Experimental*
         */
        "enableVirtualScroll": boolean;
        /**
          * Works only when 'enableVirtualScroll' is true. Estimated size of each item in the list box to ensure smooth-scrolling.
         */
        "estimatedSize": number;
        /**
          * The text to filter the options.
         */
        "filterText": any;
        /**
          * Works only when 'isCreatable' is selected. Function to format the create label displayed as an option.
         */
        "formatCreateLabel": (value: string) => string;
        "getSelectedOptions": () => Promise<any>;
        /**
          * hide tick mark icon on select option
         */
        "hideTick": boolean;
        /**
          * Allows user to create the option if the provided input doesn't match with any of the options.
         */
        "isCreatable": boolean;
        /**
          * Works with `multiple` enabled. Configures the maximum number of options that can be selected with a multi-select component.
         */
        "max": number;
        /**
          * Enables selection of multiple options. If the attribute’s value is undefined, the value is set to false.
         */
        "multiple": boolean;
        /**
          * Text to be displayed when there is no data available in the select.
         */
        "noDataText": string;
        /**
          * Default option to be shown if the option doesn't match the filterText.
         */
        "notFoundText": string;
        /**
          * Key for determining the label for a given option
         */
        "optionLabelPath": string;
        /**
          * Key for determining the value for a given option
         */
        "optionValuePath": string;
        /**
          * Value corresponding to the option, that is saved  when the form data is saved.
         */
        "options": any[];
        "scrollToLastSelected": () => Promise<void>;
        /**
          * Filter function which takes in filterText and dataSource and return a Promise. Where filter text is the text to filter the value in dataSource array. The returned promise should contain the array of options to be displayed.
         */
        "search": (text: string, dataSource: any[]) => Promise<any[]>;
        /**
          * Placeholder to placed on the search text box.
         */
        "searchText": string;
        /**
          * Enables the input with in the popup for filtering the options.
         */
        "searchable": boolean;
        /**
          * The option that is displayed as the default selection, in the list box. Must be a valid value corresponding to the fw-select-option components used in Select.
         */
        "selectedOptions": any[];
        "setFocus": () => Promise<any>;
        "setSelectedOptions": (options: any[]) => Promise<any>;
        /**
          * Pass an array of string in case of multi-select or string for single-select.
         */
        "setSelectedValues": (values: any) => Promise<any>;
        /**
          * Works only when 'isCreatable' is selected. Function to validate the newly created value. Should return true if new option is valid or false if invalid.
         */
        "validateNewOption": (value: string) => boolean;
        /**
          * Value of the option that is displayed as the default selection, in the list box. Must be a valid value corresponding to the fw-select-option components used in Select.
         */
        "value": any;
        /**
          * Standard is the default option without any graphics other options are icon and avatar which places either the icon or avatar at the beginning of the row. The props for the icon or avatar are passed as an object via the graphicsProps.
         */
        "variant": DropdownVariant;
    }
    interface FwMenu {
    }
    interface FwMenuItem {
        /**
          * Sets the state of the option to selected. The selected option is highlighted and a check mark is displayed next to it. If the attribute’s value is undefined, the value is set to false.
         */
        "selectable": boolean;
        /**
          * Sets the state of the option to selected. The selected option is highlighted and a check mark is displayed next to it. If the attribute’s value is undefined, the value is set to false.
         */
        "selected": boolean;
    }
    interface FwModal {
        /**
          * The text for the cancel button
         */
        "cancelText": string;
        /**
          * Method available from the component to perform close action on the modal
          * @returns promise that resolves to true
         */
        "close": () => Promise<boolean>;
        /**
          * The description text to be displayed on the modal
         */
        "description": string;
        /**
          * Property to add or remove the top right close icon button
         */
        "hasCloseIconButton": boolean;
        /**
          * Hide footer for the modal
         */
        "hideFooter": boolean;
        /**
          * The icon to be displayed with the title
         */
        "icon": string;
        /**
          * Toggle the visibility of the modal
         */
        "isOpen": boolean;
        /**
          * Method available from the component to perform open action on the modal
          * @returns promise that resolves to true
         */
        "open": () => Promise<boolean>;
        /**
          * Size of the modal
         */
        "size": 'standard' | 'small' | 'large';
        /**
          * Convert modal to slider
         */
        "slider": boolean;
        /**
          * The color of submit button
         */
        "submitColor": 'primary' | 'secondary' | 'danger' | 'link' | 'text';
        /**
          * Default state of submit button
         */
        "submitDisabled": boolean;
        /**
          * The text for the submit button
         */
        "submitText": string;
        /**
          * The title text to be displayed on the modal
         */
        "titleText": string;
    }
    interface FwModalContent {
    }
    interface FwModalFooter {
        /**
          * The text for the cancel button
         */
        "cancelText": string;
        /**
          * Function to call on close of modal
         */
        "close": any;
        /**
          * Function to call on submit of modal
         */
        "submit": any;
        /**
          * The color of submit button
         */
        "submitColor": 'primary' | 'secondary' | 'danger' | 'link' | 'text';
        /**
          * Default state of submit button
         */
        "submitDisabled": boolean;
        /**
          * The text for the submit button
         */
        "submitText": string;
    }
    interface FwModalTitle {
        /**
          * The title text to be displayed on the modal
         */
        "description": string;
        /**
          * The icon to be displayed with the title
         */
        "icon": string;
        /**
          * The title text to be displayed on the modal
         */
        "titleText": string;
    }
    interface FwNestedNode {
        /**
          * Error text displayed below the text box.
         */
        "errorText": string;
        /**
          * Hint text displayed below the text box.
         */
        "hintText": string;
        /**
          * label
         */
        "label": string;
        /**
          * level to keep track of selected options and reset on parent option changes
         */
        "level": number;
        /**
          * Name of the field value gets updated to
         */
        "name": string;
        /**
          * optionLabelPath
         */
        "optionLabelPath": string;
        /**
          * OptionValue path
         */
        "optionValuePath": string;
        /**
          * Options to pass through and loop
         */
        "options": any[];
        /**
          * Specifies the select field as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.
         */
        "required": boolean;
        /**
          * Fn to return initialValues from properties
         */
        "selectProps"?: any;
        /**
          * Theme based on which the list box is styled.
         */
        "state": 'normal' | 'warning' | 'error';
        /**
          * Current selected value if passed from initialvalues
         */
        "value": string;
        /**
          * Warning text displayed below the text box.
         */
        "warningText": string;
    }
    interface FwNestedSelect {
        /**
          * Error text displayed below the text box.
         */
        "errorText": string;
        /**
          * Hint text displayed below the text box.
         */
        "hintText": string;
        /**
          * label
         */
        "label": string;
        /**
          * Name of first level field
         */
        "name": string;
        /**
          * OptionLabelPath referred from field
         */
        "optionLabelPath": string;
        /**
          * OptionValuePath referred from field
         */
        "optionValuePath": string;
        /**
          * Options to display
         */
        "options": any[];
        /**
          * Specifies the select field as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.
         */
        "required": boolean;
        /**
          * Function to return initialValues
         */
        "selectProps"?: any;
        /**
          * Theme based on which the list box is styled.
         */
        "state": 'normal' | 'warning' | 'error';
        /**
          * Initial value from first level choices
         */
        "value": string;
        /**
          * Warning text displayed below the text box.
         */
        "warningText": string;
    }
    interface FwPagination {
        /**
          * Aria Label to be used for the button group.
         */
        "buttonGroupLabel": string;
        /**
          * hides page numbers in standard pagination variant. Defaults to false. Works only with `standard` variant.
         */
        "hidePageNumbers": boolean;
        /**
          * Indicates if the records in current page are being fetched.
         */
        "isLoading": boolean;
        /**
          * represents the number of pages to be shown on both the margins. Defaults to 1. Works only with `standard` variant.
         */
        "marginPagesDisplayed": number;
        /**
          * Aria Label to be used for next button.
         */
        "nextButtonLabel": string;
        /**
          * Navigates to next set of records if available.
         */
        "nextPage": () => Promise<void>;
        /**
          * The current page number.
         */
        "page": number;
        /**
          * represents the range of pages to be shown. Defaults to 4. Works only with `standard` variant.
         */
        "pageRangeDisplayed": number;
        /**
          * The number of records to be shown per page. Defaults to 10.
         */
        "perPage": number;
        /**
          * Specify the perPage options to be shown. Works only with `standard` variant.
         */
        "perPageOptions": number[];
        /**
          * Aria Label to be used for previous button.
         */
        "previousButtonLabel": string;
        /**
          * Navigates to previous set of records if available.
         */
        "previousPage": () => Promise<void>;
        /**
          * The total number of records. This is a mandatory parameter.
         */
        "total": number;
        /**
          * The variant of pagination to be displayed. Mini variant displays only previous and next buttons along with pagination information. Standard variant displays list of page numbers which can be selected along with previous and next buttons Defaults to 'mini'.
         */
        "variant": 'mini' | 'standard';
    }
    interface FwPill {
        /**
          * Theme based on which the pill is styled.
         */
        "color": 'blue' | 'red' | 'green' | 'yellow' | 'grey';
    }
    interface FwPopover {
        /**
          * Whether to focus on the element in popover-content slot on opening the dropdown.
         */
        "autoFocusOnContent": boolean;
        /**
          * The area that the popup will be checked for overflow relative to.
         */
        "boundary": HTMLElement;
        /**
          * Option to disable the popover animation on hide and show.
         */
        "disableTransition": boolean;
        /**
          * Distance defines the distance between the popover trigger and the popover content along y-axis.
         */
        "distance": string;
        /**
          * Alternative placement for popover if the default placement is not possible.
         */
        "fallbackPlacements": [PopoverPlacementType];
        /**
          * Option to determine if popover-content has a border.
         */
        "hasBorder": boolean;
        "hide": () => Promise<void>;
        /**
          * Indicates the delay after which popover will be hidden.
         */
        "hideAfter": number;
        /**
          * Indicates whether popover contents should be hidden on pressing Tab.
         */
        "hideOnTab": boolean;
        /**
          * Option to prevent the tooltip from being clipped when the component is placed inside a container with `overflow: auto|hidden|scroll`.
         */
        "hoist": boolean;
        /**
          * Placement of the popover content with respect to the popover trigger.
         */
        "placement": PopoverPlacementType;
        /**
          * Whether the popover-content width to be same as that of the popover-trigger.
         */
        "sameWidth": boolean;
        "show": () => Promise<void>;
        /**
          * Indicates the delay after which popover will be shown.
         */
        "showAfter": number;
        /**
          * Skidding defines the distance between the popover trigger and the popover content along x-axis.
         */
        "skidding": string;
        /**
          * The trigger event on which the popover-content is displayed. The available options are 'click' | 'manual' | 'hover', in case of 'manual' no trigger event will be set.
         */
        "trigger": PopoverTriggerType;
        /**
          * Variant defines the style of the popover-content.
         */
        "variant": 'select' | 'date-picker';
    }
    interface FwProgressLoader {
        /**
          * Method to end the progress. This hides the progress loader
         */
        "done": () => Promise<void>;
        /**
          * Adjust animation settings using easing (a CSS easing string). Default is `ease`
         */
        "easing": string;
        /**
          * Increments the progress status by a random amount.
         */
        "inc": () => Promise<void>;
        /**
          * Changes the minimum percentage used upon starting. Default is `0.08`
         */
        "minimum": number;
        /**
          * Specify a selector to change the parent container. Default is `body` Selector is accessed internally via document.querySelector method
         */
        "parent": string;
        /**
          * Sets the progress loader status, where `n` is a number from `0.0` to `1.0`.
         */
        "set": (n: number) => Promise<void>;
        /**
          * Show progress loader. Default `false`
         */
        "show": boolean;
        /**
          * Add speed (in ms). Default is `200`
         */
        "speed": number;
        /**
          * Method to start showing the progress loader
         */
        "start": () => Promise<void>;
        /**
          * Use Custom markup. To keep the progress bar working, keep an element with class='bar' in there
         */
        "template": string;
        /**
          * Turn on/off the automatic incrementing behavior by setting this to false. Default is `true`
         */
        "trickle": boolean;
        /**
          * Adjust how often to trickle/increment, in ms. Default is `200`
         */
        "trickleSpeed": number;
    }
    interface FwRadio {
        /**
          * Sets the state to selected. If the attribute’s value is undefined, the value is set to false.
         */
        "checked": boolean;
        /**
          * Description to be displayed for the checkbox.
         */
        "description": string;
        /**
          * Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled": boolean;
        /**
          * @deprecated Use `description` instead. Label displayed on the interface, for the check box.
         */
        "label": string;
        /**
          * Name of the component, saved as part of form data.
         */
        "name": string;
        /**
          * Sets focus on a specific `fw-radio`.
         */
        "setFocus": () => Promise<void>;
        /**
          * Theme based on which the radio button is styled.
         */
        "state": 'normal' | 'error';
        /**
          * Identifier corresponding to the component, that is saved when the form data is saved.
         */
        "value": string;
    }
    interface FwRadioGroup {
        /**
          * If true, a radio group can be saved without selecting any option. If an option is selected, the selection can be cleared. If the attribute’s value is undefined, the value is set to false.
         */
        "allowEmpty": boolean;
        /**
          * Error text displayed below the radio group.
         */
        "errorText": string;
        /**
          * Hint text displayed below the radio group.
         */
        "hintText": string;
        /**
          * Label for the component
         */
        "label": string;
        /**
          * Name of the component, saved as part of form data.
         */
        "name": string;
        /**
          * Indicates the direction of the radio buttons alignment, defaults to vertical alignment.
         */
        "orientation": 'row' | 'column';
        /**
          * Specifies the input radio group as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.
         */
        "required": boolean;
        /**
          * Sets focus on a specific `fw-radio`.
         */
        "setFocus": () => Promise<void>;
        /**
          * Theme based on which the radio group is styled.
         */
        "state": 'normal' | 'warning' | 'error';
        /**
          * Default option that is selected when the radio group is displayed on the interface. Must be a valid value corresponding to the fw-radio components used in the Radio Group.
         */
        "value"?: any | null;
        /**
          * Warning text displayed below the radio group.
         */
        "warningText": string;
    }
    interface FwSelect {
        /**
          * Whether clicking on the already selected option disables it.
         */
        "allowDeselect": boolean;
        /**
          * Describes the select's boundary HTMLElement
         */
        "boundary": HTMLElement;
        /**
          * Whether the arrow/caret should be shown in the select.
         */
        "caret": boolean;
        /**
          * Place a checkbox.
         */
        "checkbox": boolean;
        /**
          * Props to be passed for creatable select isCreatable: boolean - If true, select accepts user input that are not present as options and add them as options validateNewOption: (value) => boolean - If passed, this function will determine the error state for every new option entered. If return value is true, error state of the newly created option will be false and if return value is false, then the error state of the newly created option will be true. formatCreateLabel: (label) => string - Gets the label for the "create new ..." option in the menu. Current input value is provided as argument.
         */
        "creatableProps": { isCreatable: boolean; validateNewOption: (_value: any) => boolean; formatCreateLabel: (label: any) => string; };
        /**
          * Debounce timer for the search promise function.
         */
        "debounceTimer": number;
        /**
          * Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled": boolean;
        /**
          * Virtualize long list of elements in list options *Experimental*
         */
        "enableVirtualScroll": boolean;
        /**
          * Error text displayed below the text box.
         */
        "errorText": string;
        /**
          * Works only when 'enableVirtualScroll' is true. Estimated size of each item in the list box to ensure smooth-scrolling.
         */
        "estimatedSize": number;
        /**
          * Alternative placement for popover if the default placement is not possible.
         */
        "fallbackPlacements": [PopoverPlacementType];
        /**
          * If true, the user must select a value. The default value is not displayed.
         */
        "forceSelect": boolean;
        "getSelectedItem": () => Promise<any>;
        /**
          * Hides the dropdown panel
         */
        "hideDropdown": () => Promise<any>;
        /**
          * Hint text displayed below the text box.
         */
        "hintText": string;
        /**
          * Option to prevent the select options from being clipped when the component is placed inside a container with `overflow: auto|hidden|scroll`.
         */
        "hoist": boolean;
        /**
          * Label displayed on the interface, for the component.
         */
        "label": string;
        /**
          * If the default label prop is not used, then use this prop to pass the id of the label.
         */
        "labelledBy": string;
        /**
          * Works with `multiple` enabled. Configures the maximum number of options that can be selected with a multi-select component.
         */
        "max": number;
        /**
          * Sets the max height of select with multiple options selected and displays a scroll when maxHeight value is exceeded
         */
        "maxHeight": string;
        /**
          * Enables selection of multiple options. If the attribute’s value is undefined, the value is set to false.
         */
        "multiple": boolean;
        /**
          * Name of the component, saved as part of form data.
         */
        "name": string;
        /**
          * Text to be displayed when there is no data available in the select.
         */
        "noDataText": string;
        /**
          * Default option to be shown if the option doesn't match the filterText.
         */
        "notFoundText": string;
        /**
          * Key for determining the label for a given option
         */
        "optionLabelPath": string;
        /**
          * Key for determining the value for a given option
         */
        "optionValuePath": string;
        /**
          * The data for the select component, the options will be of type array of fw-select-options.
         */
        "options": any;
        /**
          * Placement of the options list with respect to select.
         */
        "optionsPlacement": PopoverPlacementType;
        /**
          * Standard is the default option without any graphics other options are icon and avatar which places either the icon or avatar at the beginning of the row. The props for the icon or avatar are passed as an object via the graphicsProps.
         */
        "optionsVariant": DropdownVariant;
        /**
          * Text displayed in the list box before an option is selected.
         */
        "placeholder"?: string | null;
        /**
          * If true, the user cannot modify the default value selected. If the attribute's value is undefined, the value is set to true.
         */
        "readonly": boolean;
        /**
          * Specifies the select field as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.
         */
        "required": boolean;
        /**
          * Whether the select width to be same as that of the options.
         */
        "sameWidth": boolean;
        /**
          * Filter function which takes in filterText and dataSource and return a Promise. Where filter text is the text to filter the value in dataSource array. The returned promise should contain the array of options to be displayed.
         */
        "search": any;
        /**
          * Allow to search for value. Default is true.
         */
        "searchable": boolean;
        /**
          * Array of the options that is displayed as the default selection, in the list box. Must be a valid option corresponding to the fw-select-option components used in Select.
         */
        "selectedOptions": any[];
        "setFocus": () => Promise<any>;
        "setSelectedOptions": (options: any[]) => Promise<any>;
        "setSelectedValues": (values: string | string[]) => Promise<any>;
        /**
          * Shows the dropdown panel
         */
        "showDropdown": () => Promise<any>;
        /**
          * Theme based on which the list box is styled.
         */
        "state": 'normal' | 'warning' | 'error';
        /**
          * Props to be passed for fw-tag components displayed in multi-select.
         */
        "tagProps": {};
        /**
          * The variant of tag to be used.
         */
        "tagVariant": TagVariant;
        /**
          * Type of option accepted as the input value. If a user tries to enter an option other than the specified type, the list is not populated.
         */
        "type": 'text' | 'number';
        /**
          * Value of the option that is displayed as the default selection, in the list box. Must be a valid value corresponding to the fw-select-option components used in Select.
         */
        "value": any;
        /**
          * The UI variant of the select to be used.
         */
        "variant": 'button' | 'standard' | 'mail' | 'search';
        /**
          * Warning text displayed below the text box.
         */
        "warningText": string;
    }
    interface FwSelectOption {
        /**
          * Whether clicking on the already selected option disables it.
         */
        "allowDeselect": boolean;
        /**
          * Whether clicking on option selects it.
         */
        "allowSelect": boolean;
        /**
          * Place a checkbox.
         */
        "checkbox": boolean;
        /**
          * Sets the state of the option to disabled. The selected option is disabled and greyed out. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled": boolean;
        /**
          * The props for the graphics variant. ex., icon props in case of graphicsType = 'icon'
         */
        "graphicsProps": any;
        /**
          * Used in grouped list, provides the group in which the option belongs
         */
        "groupName": string;
        /**
          * Hide tick mark icon
         */
        "hideTick": boolean;
        /**
          * States that the option is an HTML value. If the attribute's value is undefined, the value is set to true.
         */
        "html": boolean;
        /**
          * HTML content that is displayed as the option.
         */
        "htmlContent"?: string;
        /**
          * Third line text in conversation can be metaText additional details etc.
         */
        "metaText": MetaText;
        /**
          * Alternate text displayed on the interface, in place of the actual HTML content.
         */
        "optionText": string;
        /**
          * Sets the state of the option to selected. The selected option is highlighted and a check mark is displayed next to it. If the attribute’s value is undefined, the value is set to false.
         */
        "selected": boolean;
        "setFocus": () => Promise<any>;
        /**
          * Second line text can be description etc.
         */
        "subText": string;
        /**
          * The text to be displayed in the option.
         */
        "text": string;
        /**
          * Value corresponding to the option, that is saved  when the form data is saved.
         */
        "value": string | number;
        /**
          * Standard is the default option without any graphics other options are icon and avatar which places either the icon or avatar at the beginning of the row. The props for the icon or avatar are passed as an object via the graphicsProps.
         */
        "variant": DropdownVariant;
    }
    interface FwSkeleton {
        /**
          * Number of rows of current skeleton type
         */
        "count": number;
        /**
          * Custom css styles (background/margins/width/height etc.)
          * @type {({[k: string]: string} | string)}
         */
        "customStyles": { [key: string]: string } | string;
        /**
          * Effect the skeleton will use.
         */
        "effect": 'pulse' | 'sheen' | 'none';
        /**
          * Height of the skeleton ex. 100px, 100%, auto etc.
         */
        "height": string;
        /**
          * MarginBottom of the skeleton ex. 10px, 0 etc.
         */
        "marginBottom": string;
        /**
          * Variant of the skeleton - circle or rectangle or text
         */
        "variant": 'circle' | 'rect' | 'text';
        /**
          * Width of the skeleton ex. 100px, 100%, auto etc.
         */
        "width": string;
    }
    interface FwSpinner {
        /**
          * Color in which the loader is displayed, specified as a standard CSS color.
         */
        "color": string;
        /**
          * Size of the loader.
         */
        "size": 'micro' | 'small' | 'medium' | 'large' | 'default';
    }
    interface FwTab {
        /**
          * Determines whether the tab is active.
         */
        "active": boolean;
        /**
          * Disables this tab
         */
        "disabled": boolean;
        /**
          * The name of the tab panel which this tab controls.
         */
        "panel": string;
        /**
          * Header for the tab to be displayed.
         */
        "tabHeader": string;
        /**
          * Unique name of the tab.
         */
        "tabName": string;
    }
    interface FwTabPanel {
        /**
          * If true sets the panel display to block, none otherwise.
         */
        "active": boolean;
        /**
          * The panel name.
         */
        "name": string;
    }
    interface FwTabs {
        /**
          * Activates the tab based based on tabindex or name.
         */
        "activateTab": (index?: number, name?: string) => Promise<void>;
        /**
          * The index of the tab to be activated (Starts from 0)
         */
        "activeTabIndex": number;
        /**
          * The name of the tab to be activated. If present, will be taken as priority over `activeTabIndex`.
         */
        "activeTabName"?: string;
        /**
          * Describes the purpose of set of tabs.
         */
        "label": string;
        /**
          * The style of tab headers that needs to be displayed, box will display headers in a container.
         */
        "variant": 'box' | 'normal';
    }
    interface FwTag {
        /**
          * Whether the Tag can be closed.
         */
        "closable": boolean;
        /**
          * Sets the state of the tag to disabled. The close button is disabled. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled": boolean;
        /**
          * Whether the Tag is focusable.
         */
        "focusable": boolean;
        /**
          * The props need to be passed for the variant. If the variant is avatar then use this prop to send the props for the fw-avatar component.
         */
        "graphicsProps": {};
        /**
          * Index of tag in a group of tags
         */
        "index": string | number;
        /**
          * If true, tag will be focused
         */
        "isFocused": boolean;
        "setFocus": () => Promise<any>;
        /**
          * Truncate text with ellipsis when text overflows
         */
        "showEllipsisOnOverflow": boolean;
        /**
          * Theme based on which the tag is styled.
         */
        "state": TagState;
        /**
          * Display sub text in the tag component.
         */
        "subText": string;
        /**
          * Display text in the tag component.
         */
        "text": string;
        /**
          * Value associated with the tag component, that is saved when the form data is saved.
         */
        "value": string | number;
        /**
          * The variant of tag to be displayed.
         */
        "variant": TagVariant;
    }
    interface FwTextarea {
        /**
          * Width of the input box, specified as number of columns.
         */
        "cols"?: number;
        /**
          * Disables the text area on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled": boolean;
        /**
          * Error text displayed below the text box.
         */
        "errorText": string;
        /**
          * Hint text displayed below the text box.
         */
        "hintText": string;
        /**
          * Label displayed on the interface, for the component.
         */
        "label": string;
        /**
          * Max number of rows the textarea can create when user writes content greater than regular rows.
         */
        "maxRows"?: number;
        /**
          * Debounce timer for setting rows dynamically based on user input and maxRows, default is 200ms.
         */
        "maxRowsDebounceTimer"?: number;
        /**
          * Maximum number of characters a user can enter in the input box.
         */
        "maxlength"?: number;
        /**
          * Minimum number of characters a user must enter in the input box for the value to be valid.
         */
        "minlength"?: number;
        /**
          * Name of the component, saved as part of form data.
         */
        "name": string;
        /**
          * Text displayed in the input box before a user enters a value.
         */
        "placeholder"?: string | null;
        /**
          * If true, the user cannot enter a value in the input box. If the attribute’s value is undefined, the value is set to false.
         */
        "readonly": boolean;
        /**
          * Specifies the input box as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.
         */
        "required": boolean;
        /**
          * Specifies the way in which the text area can be resized
         */
        "resize": 'none' | 'both' | 'horizontal' | 'vertical';
        /**
          * Height of the input box, specified as number of rows.
         */
        "rows"?: number;
        /**
          * Sets focus on a specific `fw-textarea`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * Theme based on which the input box is styled.
         */
        "state": 'normal' | 'warning' | 'error';
        /**
          * Default value displayed in the input box.
         */
        "value"?: string | null;
        /**
          * Warning text displayed below the text box.
         */
        "warningText": string;
        /**
          * Type of text wrapping used by the input box. If the value is hard, the text in the textarea is wrapped (contains line breaks) when the form data is saved. If the value is soft, the text in the textarea is saved as a single line, when the form data is saved.
         */
        "wrap": 'soft' | 'hard';
    }
    interface FwTimepicker {
        /**
          * Whether clicking on the already selected option disables it.
         */
        "allowDeselect": boolean;
        /**
          * Whether the arrow/caret should be shown in the timepicker.
         */
        "caret": boolean;
        /**
          * Set true to disable the element
         */
        "disabled": boolean;
        /**
          * Error text displayed below the text box.
         */
        "errorText": string;
        /**
          * Format in which time values are populated in the list box. If the value is hh:mm a, the time values are in the 12-hour format. If the value is hh:mm, the time values are in the 24-hr format. The default value will be set based on the locale time format.
         */
        "format": string;
        /**
          * Hint text displayed below the text box.
         */
        "hintText": string;
        /**
          * Time interval between the values displayed in the list, specified in minutes.
         */
        "interval": number;
        /**
          * Label displayed on the interface, for the component.
         */
        "label": string;
        /**
          * Locale for which timePicker needs to be shown. Defaults to browser's current locale.
         */
        "locale": string;
        /**
          * Upper time-limit for the values displayed in the list. The default value will be set based on the locale time format.
         */
        "maxTime"?: string;
        /**
          * Lower time-limit for the values displayed in the list. The default value will be set based on the locale time format.
         */
        "minTime"?: string;
        /**
          * Name of the component, saved as part of form data.
         */
        "name": string;
        /**
          * Placement of the options list with respect to timepicker.
         */
        "optionsPlacement": PopoverPlacementType;
        /**
          * Text displayed in the select before an option is selected.
         */
        "placeholder"?: string | null;
        /**
          * If true, the user cannot type in the text input
         */
        "readonly": boolean;
        /**
          * Specifies the input box as a mandatory field and displays an asterisk next to the label. If the attribute's value is undefined, the value is set to false.
         */
        "required": boolean;
        /**
          * Whether the dropdown should be same width as that of the input.
         */
        "sameWidth": boolean;
        /**
          * Sets focus on a specific `fw-timepicker`.
         */
        "setFocus": () => Promise<void>;
        /**
          * Theme based on which the input of the timepicker is styled.
         */
        "state": 'normal' | 'warning' | 'error';
        /**
          * The Time value. The value is always in the non meridian format i.e., HH:mm
         */
        "value"?: string;
        /**
          * Warning text displayed below the text box.
         */
        "warningText": string;
    }
    interface FwToast {
        /**
          * The Content of the action link
         */
        "actionLinkText": string;
        /**
          * The content to be displayed in toast
         */
        "content": string;
        /**
          * Pause the toast from hiding on mouse hover
         */
        "pauseOnHover": boolean;
        /**
          * position of the toast notification in screen
         */
        "position": 'top-center' | 'top-left' | 'top-right';
        /**
          * Prevent rendering the duplicate toasters at the same time
         */
        "shouldPreventDuplicates": boolean;
        /**
          * won't close automatically
         */
        "sticky": boolean;
        /**
          * Time duration of the toast visibility
         */
        "timeout": number;
        "trigger": (opts: ToastOptions) => Promise<void>;
        /**
          * Type of the toast - success,failure, warning, inprogress
         */
        "type": 'success' | 'error' | 'warning' | 'inprogress';
    }
    interface FwToastMessage {
        /**
          * The Content of the action link
         */
        "actionLinkText": string;
        /**
          * The content to be displayed in toast
         */
        "content": string;
        /**
          * visibility prop of toast message
         */
        "open": boolean;
        /**
          * Pause the toast from hiding on mouse hover
         */
        "pauseOnHover": boolean;
        /**
          * won't close automatically
         */
        "sticky": boolean;
        /**
          * Time duration of the toast visibility
         */
        "timeout": number;
        /**
          * Type of the toast - success,failure, warning, inprogress
         */
        "type": 'success' | 'error' | 'warning' | 'inprogress';
    }
    interface FwToggle {
        /**
          * Sets the selected state as the default state. If the attribute’s value is undefined, the value is set to false.
         */
        "checked": boolean;
        /**
          * Specifies whether to disable the control on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled": boolean;
        /**
          * Label for the component, that can be used by screen readers.
         */
        "label": string;
        /**
          * Name of the component, saved as part of the form data.
         */
        "name": string;
        /**
          * Specifies whether to show the check and cancel icons on toggle button. If the attribute’s value is undefined, the value is set to true.
         */
        "showIcon": boolean;
        /**
          * Size of the input control.
         */
        "size": 'small' | 'medium' | 'large';
    }
    interface FwToggleGroup {
        /**
          * Label for the component, that can be used by screen readers.
         */
        "label": string;
        /**
          * Boolean value to allow multiple selection or single child selection
         */
        "multiple": boolean;
        /**
          * Name of the component, saved as part of form data.
         */
        "name": string;
        "setSelectedValues": (values: string | string[]) => Promise<void>;
        /**
          * Selected items to be shown - stored in array format - if property "multiple" is set to false, this will always be a single value array
         */
        "value": any;
    }
    interface FwToggleGroupButton {
        /**
          * sets the default base class name and the rest of the class names for the other states are automatically appended to this
         */
        "baseClassName": string;
        /**
          * Label displayed as description in the card.
         */
        "description": string;
        /**
          * Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled": boolean;
        /**
          * Label displayed as header in the card.
         */
        "header": string;
        /**
          * index attached inside the parent group component
         */
        "index": number;
        /**
          * Enables the component to be used as a part of multi selection group
         */
        "isCheckbox": boolean;
        /**
          * Name of the component, saved as part of the form data.
         */
        "name": string;
        /**
          * Enables the component to be used as a toggle button or just to be used as a normal button
         */
        "selectable": boolean;
        /**
          * Sets the state to selected. If the attribute’s value is undefined, the value is set to false.
         */
        "selected": boolean;
        /**
          * Public method exposed to set the focus for the button component - to be used for accessibility
         */
        "setFocus": () => Promise<void>;
        /**
          * sets the type of the button
         */
        "type": 'card' | 'icon' | 'custom';
        /**
          * Identifier corresponding to the component, that is saved when the form data is saved.
         */
        "value": string;
    }
    interface FwTooltip {
        /**
          * Content of the tooltip.
         */
        "content": string;
        /**
          * Distance defines the distance between the popover trigger and the popover content along y-axis.
         */
        "distance": string;
        /**
          * Alternative placement for popover if the default placement is not possible.
         */
        "fallbackPlacements": [PopoverPlacementType];
        /**
          * Header of the tooltip.
         */
        "header": string;
        /**
          * Hides the tooltip.
          * @returns promise that resolves to true
         */
        "hide": () => Promise<boolean>;
        /**
          * Option to prevent the tooltip from being clipped when the component is placed inside a container with `overflow: auto|hidden|scroll`.
         */
        "hoist": boolean;
        /**
          * Placement of the popover content with respect to the popover trigger.
         */
        "placement": PopoverPlacementType;
        /**
          * Shows the tooltip.
          * @returns promise that resolves to true
         */
        "show": () => Promise<boolean>;
        /**
          * The trigger event on which the popover-content is displayed. The available options are 'click' | 'manual' | 'hover', in case of 'manual' no trigger event will be set.
         */
        "trigger": PopoverTriggerType;
    }
}
export interface FwAccordionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwAccordionElement;
}
export interface FwButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwButtonElement;
}
export interface FwCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwCheckboxElement;
}
export interface FwCountryPhoneCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwCountryPhoneElement;
}
export interface FwDataTableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwDataTableElement;
}
export interface FwDatepickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwDatepickerElement;
}
export interface FwDragContainerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwDragContainerElement;
}
export interface FwFile2CustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwFile2Element;
}
export interface FwFileUploaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwFileUploaderElement;
}
export interface FwFileUploader2CustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwFileUploader2Element;
}
export interface FwFileUploaderFileCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwFileUploaderFileElement;
}
export interface FwFileUploaderProgressCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwFileUploaderProgressElement;
}
export interface FwFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwFormElement;
}
export interface FwInlineMessageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwInlineMessageElement;
}
export interface FwInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwInputElement;
}
export interface FwKebabMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwKebabMenuElement;
}
export interface FwListOptionsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwListOptionsElement;
}
export interface FwModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwModalElement;
}
export interface FwNestedNodeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwNestedNodeElement;
}
export interface FwNestedSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwNestedSelectElement;
}
export interface FwPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwPaginationElement;
}
export interface FwPopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwPopoverElement;
}
export interface FwRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwRadioElement;
}
export interface FwRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwRadioGroupElement;
}
export interface FwSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwSelectElement;
}
export interface FwSelectOptionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwSelectOptionElement;
}
export interface FwTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwTabsElement;
}
export interface FwTagCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwTagElement;
}
export interface FwTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwTextareaElement;
}
export interface FwTimepickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwTimepickerElement;
}
export interface FwToastMessageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwToastMessageElement;
}
export interface FwToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwToggleElement;
}
export interface FwToggleGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwToggleGroupElement;
}
export interface FwToggleGroupButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwToggleGroupButtonElement;
}
declare global {
    interface HTMLFwAccordionElement extends Components.FwAccordion, HTMLStencilElement {
    }
    var HTMLFwAccordionElement: {
        prototype: HTMLFwAccordionElement;
        new (): HTMLFwAccordionElement;
    };
    interface HTMLFwAccordionBodyElement extends Components.FwAccordionBody, HTMLStencilElement {
    }
    var HTMLFwAccordionBodyElement: {
        prototype: HTMLFwAccordionBodyElement;
        new (): HTMLFwAccordionBodyElement;
    };
    interface HTMLFwAccordionTitleElement extends Components.FwAccordionTitle, HTMLStencilElement {
    }
    var HTMLFwAccordionTitleElement: {
        prototype: HTMLFwAccordionTitleElement;
        new (): HTMLFwAccordionTitleElement;
    };
    interface HTMLFwAvatarElement extends Components.FwAvatar, HTMLStencilElement {
    }
    var HTMLFwAvatarElement: {
        prototype: HTMLFwAvatarElement;
        new (): HTMLFwAvatarElement;
    };
    interface HTMLFwButtonElement extends Components.FwButton, HTMLStencilElement {
    }
    var HTMLFwButtonElement: {
        prototype: HTMLFwButtonElement;
        new (): HTMLFwButtonElement;
    };
    interface HTMLFwButtonGroupElement extends Components.FwButtonGroup, HTMLStencilElement {
    }
    var HTMLFwButtonGroupElement: {
        prototype: HTMLFwButtonGroupElement;
        new (): HTMLFwButtonGroupElement;
    };
    interface HTMLFwCheckboxElement extends Components.FwCheckbox, HTMLStencilElement {
    }
    var HTMLFwCheckboxElement: {
        prototype: HTMLFwCheckboxElement;
        new (): HTMLFwCheckboxElement;
    };
    interface HTMLFwCountryPhoneElement extends Components.FwCountryPhone, HTMLStencilElement {
    }
    var HTMLFwCountryPhoneElement: {
        prototype: HTMLFwCountryPhoneElement;
        new (): HTMLFwCountryPhoneElement;
    };
    interface HTMLFwCustomCellAnchorElement extends Components.FwCustomCellAnchor, HTMLStencilElement {
    }
    var HTMLFwCustomCellAnchorElement: {
        prototype: HTMLFwCustomCellAnchorElement;
        new (): HTMLFwCustomCellAnchorElement;
    };
    interface HTMLFwCustomCellIconElement extends Components.FwCustomCellIcon, HTMLStencilElement {
    }
    var HTMLFwCustomCellIconElement: {
        prototype: HTMLFwCustomCellIconElement;
        new (): HTMLFwCustomCellIconElement;
    };
    interface HTMLFwCustomCellParagraphElement extends Components.FwCustomCellParagraph, HTMLStencilElement {
    }
    var HTMLFwCustomCellParagraphElement: {
        prototype: HTMLFwCustomCellParagraphElement;
        new (): HTMLFwCustomCellParagraphElement;
    };
    interface HTMLFwCustomCellUserElement extends Components.FwCustomCellUser, HTMLStencilElement {
    }
    var HTMLFwCustomCellUserElement: {
        prototype: HTMLFwCustomCellUserElement;
        new (): HTMLFwCustomCellUserElement;
    };
    interface HTMLFwDataTableElement extends Components.FwDataTable, HTMLStencilElement {
    }
    var HTMLFwDataTableElement: {
        prototype: HTMLFwDataTableElement;
        new (): HTMLFwDataTableElement;
    };
    interface HTMLFwDatepickerElement extends Components.FwDatepicker, HTMLStencilElement {
    }
    var HTMLFwDatepickerElement: {
        prototype: HTMLFwDatepickerElement;
        new (): HTMLFwDatepickerElement;
    };
    interface HTMLFwDragContainerElement extends Components.FwDragContainer, HTMLStencilElement {
    }
    var HTMLFwDragContainerElement: {
        prototype: HTMLFwDragContainerElement;
        new (): HTMLFwDragContainerElement;
    };
    interface HTMLFwDragItemElement extends Components.FwDragItem, HTMLStencilElement {
    }
    var HTMLFwDragItemElement: {
        prototype: HTMLFwDragItemElement;
        new (): HTMLFwDragItemElement;
    };
    interface HTMLFwFile2Element extends Components.FwFile2, HTMLStencilElement {
    }
    var HTMLFwFile2Element: {
        prototype: HTMLFwFile2Element;
        new (): HTMLFwFile2Element;
    };
    interface HTMLFwFileUploaderElement extends Components.FwFileUploader, HTMLStencilElement {
    }
    var HTMLFwFileUploaderElement: {
        prototype: HTMLFwFileUploaderElement;
        new (): HTMLFwFileUploaderElement;
    };
    interface HTMLFwFileUploader2Element extends Components.FwFileUploader2, HTMLStencilElement {
    }
    var HTMLFwFileUploader2Element: {
        prototype: HTMLFwFileUploader2Element;
        new (): HTMLFwFileUploader2Element;
    };
    interface HTMLFwFileUploaderFileElement extends Components.FwFileUploaderFile, HTMLStencilElement {
    }
    var HTMLFwFileUploaderFileElement: {
        prototype: HTMLFwFileUploaderFileElement;
        new (): HTMLFwFileUploaderFileElement;
    };
    interface HTMLFwFileUploaderProgressElement extends Components.FwFileUploaderProgress, HTMLStencilElement {
    }
    var HTMLFwFileUploaderProgressElement: {
        prototype: HTMLFwFileUploaderProgressElement;
        new (): HTMLFwFileUploaderProgressElement;
    };
    interface HTMLFwFormElement extends Components.FwForm, HTMLStencilElement {
    }
    var HTMLFwFormElement: {
        prototype: HTMLFwFormElement;
        new (): HTMLFwFormElement;
    };
    interface HTMLFwFormControlElement extends Components.FwFormControl, HTMLStencilElement {
    }
    var HTMLFwFormControlElement: {
        prototype: HTMLFwFormControlElement;
        new (): HTMLFwFormControlElement;
    };
    interface HTMLFwFormatDateElement extends Components.FwFormatDate, HTMLStencilElement {
    }
    var HTMLFwFormatDateElement: {
        prototype: HTMLFwFormatDateElement;
        new (): HTMLFwFormatDateElement;
    };
    interface HTMLFwFormatNumberElement extends Components.FwFormatNumber, HTMLStencilElement {
    }
    var HTMLFwFormatNumberElement: {
        prototype: HTMLFwFormatNumberElement;
        new (): HTMLFwFormatNumberElement;
    };
    interface HTMLFwIconElement extends Components.FwIcon, HTMLStencilElement {
    }
    var HTMLFwIconElement: {
        prototype: HTMLFwIconElement;
        new (): HTMLFwIconElement;
    };
    interface HTMLFwInlineMessageElement extends Components.FwInlineMessage, HTMLStencilElement {
    }
    var HTMLFwInlineMessageElement: {
        prototype: HTMLFwInlineMessageElement;
        new (): HTMLFwInlineMessageElement;
    };
    interface HTMLFwInputElement extends Components.FwInput, HTMLStencilElement {
    }
    var HTMLFwInputElement: {
        prototype: HTMLFwInputElement;
        new (): HTMLFwInputElement;
    };
    interface HTMLFwKebabMenuElement extends Components.FwKebabMenu, HTMLStencilElement {
    }
    var HTMLFwKebabMenuElement: {
        prototype: HTMLFwKebabMenuElement;
        new (): HTMLFwKebabMenuElement;
    };
    interface HTMLFwLabelElement extends Components.FwLabel, HTMLStencilElement {
    }
    var HTMLFwLabelElement: {
        prototype: HTMLFwLabelElement;
        new (): HTMLFwLabelElement;
    };
    interface HTMLFwListOptionsElement extends Components.FwListOptions, HTMLStencilElement {
    }
    var HTMLFwListOptionsElement: {
        prototype: HTMLFwListOptionsElement;
        new (): HTMLFwListOptionsElement;
    };
    interface HTMLFwMenuElement extends Components.FwMenu, HTMLStencilElement {
    }
    var HTMLFwMenuElement: {
        prototype: HTMLFwMenuElement;
        new (): HTMLFwMenuElement;
    };
    interface HTMLFwMenuItemElement extends Components.FwMenuItem, HTMLStencilElement {
    }
    var HTMLFwMenuItemElement: {
        prototype: HTMLFwMenuItemElement;
        new (): HTMLFwMenuItemElement;
    };
    interface HTMLFwModalElement extends Components.FwModal, HTMLStencilElement {
    }
    var HTMLFwModalElement: {
        prototype: HTMLFwModalElement;
        new (): HTMLFwModalElement;
    };
    interface HTMLFwModalContentElement extends Components.FwModalContent, HTMLStencilElement {
    }
    var HTMLFwModalContentElement: {
        prototype: HTMLFwModalContentElement;
        new (): HTMLFwModalContentElement;
    };
    interface HTMLFwModalFooterElement extends Components.FwModalFooter, HTMLStencilElement {
    }
    var HTMLFwModalFooterElement: {
        prototype: HTMLFwModalFooterElement;
        new (): HTMLFwModalFooterElement;
    };
    interface HTMLFwModalTitleElement extends Components.FwModalTitle, HTMLStencilElement {
    }
    var HTMLFwModalTitleElement: {
        prototype: HTMLFwModalTitleElement;
        new (): HTMLFwModalTitleElement;
    };
    interface HTMLFwNestedNodeElement extends Components.FwNestedNode, HTMLStencilElement {
    }
    var HTMLFwNestedNodeElement: {
        prototype: HTMLFwNestedNodeElement;
        new (): HTMLFwNestedNodeElement;
    };
    interface HTMLFwNestedSelectElement extends Components.FwNestedSelect, HTMLStencilElement {
    }
    var HTMLFwNestedSelectElement: {
        prototype: HTMLFwNestedSelectElement;
        new (): HTMLFwNestedSelectElement;
    };
    interface HTMLFwPaginationElement extends Components.FwPagination, HTMLStencilElement {
    }
    var HTMLFwPaginationElement: {
        prototype: HTMLFwPaginationElement;
        new (): HTMLFwPaginationElement;
    };
    interface HTMLFwPillElement extends Components.FwPill, HTMLStencilElement {
    }
    var HTMLFwPillElement: {
        prototype: HTMLFwPillElement;
        new (): HTMLFwPillElement;
    };
    interface HTMLFwPopoverElement extends Components.FwPopover, HTMLStencilElement {
    }
    var HTMLFwPopoverElement: {
        prototype: HTMLFwPopoverElement;
        new (): HTMLFwPopoverElement;
    };
    interface HTMLFwProgressLoaderElement extends Components.FwProgressLoader, HTMLStencilElement {
    }
    var HTMLFwProgressLoaderElement: {
        prototype: HTMLFwProgressLoaderElement;
        new (): HTMLFwProgressLoaderElement;
    };
    interface HTMLFwRadioElement extends Components.FwRadio, HTMLStencilElement {
    }
    var HTMLFwRadioElement: {
        prototype: HTMLFwRadioElement;
        new (): HTMLFwRadioElement;
    };
    interface HTMLFwRadioGroupElement extends Components.FwRadioGroup, HTMLStencilElement {
    }
    var HTMLFwRadioGroupElement: {
        prototype: HTMLFwRadioGroupElement;
        new (): HTMLFwRadioGroupElement;
    };
    interface HTMLFwSelectElement extends Components.FwSelect, HTMLStencilElement {
    }
    var HTMLFwSelectElement: {
        prototype: HTMLFwSelectElement;
        new (): HTMLFwSelectElement;
    };
    interface HTMLFwSelectOptionElement extends Components.FwSelectOption, HTMLStencilElement {
    }
    var HTMLFwSelectOptionElement: {
        prototype: HTMLFwSelectOptionElement;
        new (): HTMLFwSelectOptionElement;
    };
    interface HTMLFwSkeletonElement extends Components.FwSkeleton, HTMLStencilElement {
    }
    var HTMLFwSkeletonElement: {
        prototype: HTMLFwSkeletonElement;
        new (): HTMLFwSkeletonElement;
    };
    interface HTMLFwSpinnerElement extends Components.FwSpinner, HTMLStencilElement {
    }
    var HTMLFwSpinnerElement: {
        prototype: HTMLFwSpinnerElement;
        new (): HTMLFwSpinnerElement;
    };
    interface HTMLFwTabElement extends Components.FwTab, HTMLStencilElement {
    }
    var HTMLFwTabElement: {
        prototype: HTMLFwTabElement;
        new (): HTMLFwTabElement;
    };
    interface HTMLFwTabPanelElement extends Components.FwTabPanel, HTMLStencilElement {
    }
    var HTMLFwTabPanelElement: {
        prototype: HTMLFwTabPanelElement;
        new (): HTMLFwTabPanelElement;
    };
    interface HTMLFwTabsElement extends Components.FwTabs, HTMLStencilElement {
    }
    var HTMLFwTabsElement: {
        prototype: HTMLFwTabsElement;
        new (): HTMLFwTabsElement;
    };
    interface HTMLFwTagElement extends Components.FwTag, HTMLStencilElement {
    }
    var HTMLFwTagElement: {
        prototype: HTMLFwTagElement;
        new (): HTMLFwTagElement;
    };
    interface HTMLFwTextareaElement extends Components.FwTextarea, HTMLStencilElement {
    }
    var HTMLFwTextareaElement: {
        prototype: HTMLFwTextareaElement;
        new (): HTMLFwTextareaElement;
    };
    interface HTMLFwTimepickerElement extends Components.FwTimepicker, HTMLStencilElement {
    }
    var HTMLFwTimepickerElement: {
        prototype: HTMLFwTimepickerElement;
        new (): HTMLFwTimepickerElement;
    };
    interface HTMLFwToastElement extends Components.FwToast, HTMLStencilElement {
    }
    var HTMLFwToastElement: {
        prototype: HTMLFwToastElement;
        new (): HTMLFwToastElement;
    };
    interface HTMLFwToastMessageElement extends Components.FwToastMessage, HTMLStencilElement {
    }
    var HTMLFwToastMessageElement: {
        prototype: HTMLFwToastMessageElement;
        new (): HTMLFwToastMessageElement;
    };
    interface HTMLFwToggleElement extends Components.FwToggle, HTMLStencilElement {
    }
    var HTMLFwToggleElement: {
        prototype: HTMLFwToggleElement;
        new (): HTMLFwToggleElement;
    };
    interface HTMLFwToggleGroupElement extends Components.FwToggleGroup, HTMLStencilElement {
    }
    var HTMLFwToggleGroupElement: {
        prototype: HTMLFwToggleGroupElement;
        new (): HTMLFwToggleGroupElement;
    };
    interface HTMLFwToggleGroupButtonElement extends Components.FwToggleGroupButton, HTMLStencilElement {
    }
    var HTMLFwToggleGroupButtonElement: {
        prototype: HTMLFwToggleGroupButtonElement;
        new (): HTMLFwToggleGroupButtonElement;
    };
    interface HTMLFwTooltipElement extends Components.FwTooltip, HTMLStencilElement {
    }
    var HTMLFwTooltipElement: {
        prototype: HTMLFwTooltipElement;
        new (): HTMLFwTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "fw-accordion": HTMLFwAccordionElement;
        "fw-accordion-body": HTMLFwAccordionBodyElement;
        "fw-accordion-title": HTMLFwAccordionTitleElement;
        "fw-avatar": HTMLFwAvatarElement;
        "fw-button": HTMLFwButtonElement;
        "fw-button-group": HTMLFwButtonGroupElement;
        "fw-checkbox": HTMLFwCheckboxElement;
        "fw-country-phone": HTMLFwCountryPhoneElement;
        "fw-custom-cell-anchor": HTMLFwCustomCellAnchorElement;
        "fw-custom-cell-icon": HTMLFwCustomCellIconElement;
        "fw-custom-cell-paragraph": HTMLFwCustomCellParagraphElement;
        "fw-custom-cell-user": HTMLFwCustomCellUserElement;
        "fw-data-table": HTMLFwDataTableElement;
        "fw-datepicker": HTMLFwDatepickerElement;
        "fw-drag-container": HTMLFwDragContainerElement;
        "fw-drag-item": HTMLFwDragItemElement;
        "fw-file-2": HTMLFwFile2Element;
        "fw-file-uploader": HTMLFwFileUploaderElement;
        "fw-file-uploader-2": HTMLFwFileUploader2Element;
        "fw-file-uploader-file": HTMLFwFileUploaderFileElement;
        "fw-file-uploader-progress": HTMLFwFileUploaderProgressElement;
        "fw-form": HTMLFwFormElement;
        "fw-form-control": HTMLFwFormControlElement;
        "fw-format-date": HTMLFwFormatDateElement;
        "fw-format-number": HTMLFwFormatNumberElement;
        "fw-icon": HTMLFwIconElement;
        "fw-inline-message": HTMLFwInlineMessageElement;
        "fw-input": HTMLFwInputElement;
        "fw-kebab-menu": HTMLFwKebabMenuElement;
        "fw-label": HTMLFwLabelElement;
        "fw-list-options": HTMLFwListOptionsElement;
        "fw-menu": HTMLFwMenuElement;
        "fw-menu-item": HTMLFwMenuItemElement;
        "fw-modal": HTMLFwModalElement;
        "fw-modal-content": HTMLFwModalContentElement;
        "fw-modal-footer": HTMLFwModalFooterElement;
        "fw-modal-title": HTMLFwModalTitleElement;
        "fw-nested-node": HTMLFwNestedNodeElement;
        "fw-nested-select": HTMLFwNestedSelectElement;
        "fw-pagination": HTMLFwPaginationElement;
        "fw-pill": HTMLFwPillElement;
        "fw-popover": HTMLFwPopoverElement;
        "fw-progress-loader": HTMLFwProgressLoaderElement;
        "fw-radio": HTMLFwRadioElement;
        "fw-radio-group": HTMLFwRadioGroupElement;
        "fw-select": HTMLFwSelectElement;
        "fw-select-option": HTMLFwSelectOptionElement;
        "fw-skeleton": HTMLFwSkeletonElement;
        "fw-spinner": HTMLFwSpinnerElement;
        "fw-tab": HTMLFwTabElement;
        "fw-tab-panel": HTMLFwTabPanelElement;
        "fw-tabs": HTMLFwTabsElement;
        "fw-tag": HTMLFwTagElement;
        "fw-textarea": HTMLFwTextareaElement;
        "fw-timepicker": HTMLFwTimepickerElement;
        "fw-toast": HTMLFwToastElement;
        "fw-toast-message": HTMLFwToastMessageElement;
        "fw-toggle": HTMLFwToggleElement;
        "fw-toggle-group": HTMLFwToggleGroupElement;
        "fw-toggle-group-button": HTMLFwToggleGroupButtonElement;
        "fw-tooltip": HTMLFwTooltipElement;
    }
}
declare namespace LocalJSX {
    interface FwAccordion {
        /**
          * To manage accordion expanded or collapsed state
         */
        "expanded"?: boolean;
        /**
          * Triggered when the accordion is expanded or collapsed
         */
        "onFwAccordionToggle"?: (event: FwAccordionCustomEvent<AccordionToggleEvent>) => void;
        /**
          * The type of accordion to be displayed. default => Accordion with all borders no_bounding_box => Accordion with top and bottom borders only
         */
        "type"?: 'default' | 'no_bounding_box';
    }
    interface FwAccordionBody {
        "expanded"?: boolean;
        "type"?: 'default' | 'no_bounding_box';
    }
    interface FwAccordionTitle {
        "expanded"?: boolean;
        /**
          * The size of the default icon
         */
        "iconSize"?: 'small' | 'medium' | 'large';
        "toggleState"?: any;
        /**
          * Truncate title on text overflow
         */
        "truncateOnOverflow"?: boolean;
        "type"?: 'default' | 'no_bounding_box';
    }
    interface FwAvatar {
        "alt"?: string;
        "image"?: string;
        "initials"?: string;
        "mode"?: 'dark' | 'light' | 'error';
        "name"?: string;
        "shape"?: 'circle' | 'square' | 'rounded';
        "size"?: | 'xxlarge'
    | 'xlarge'
    | 'large'
    | 'medium'
    | 'small'
    | 'xsmall'
    | 'xxsmall';
    }
    interface FwButton {
        /**
          * Identifier of  the theme based on which the button is styled.
         */
        "color"?: 'primary' | 'secondary' | 'danger' | 'link' | 'text';
        /**
          * Disables the button on the interface. Default value is false.
         */
        "disabled"?: boolean;
        /**
          * Accepts the id of the fw-file-uploader component to upload the file.
         */
        "fileUploaderId"?: string;
        /**
          * Loading state for the button, Default value is false.
         */
        "loading"?: boolean;
        /**
          * Accepts the id of the fw-modal component to open it on click.
         */
        "modalTriggerId"?: string;
        /**
          * Triggered when the button loses focus.
         */
        "onFwBlur"?: (event: FwButtonCustomEvent<void>) => void;
        /**
          * Triggered when the button is clicked.
         */
        "onFwClick"?: (event: FwButtonCustomEvent<void>) => void;
        /**
          * Triggered when the button comes into focus.
         */
        "onFwFocus"?: (event: FwButtonCustomEvent<void>) => void;
        /**
          * Caret indicator for the button, Default value is false.
         */
        "showCaretIcon"?: boolean;
        /**
          * Size of the button.
         */
        "size"?: 'normal' | 'small' | 'icon' | 'icon-small';
        /**
          * Sets the delay for throttle in milliseconds. Defaults to 200 milliseconds.
         */
        "throttleDelay"?: number;
        /**
          * Button type based on which actions are performed when the button is clicked.
         */
        "type"?: 'button' | 'submit';
    }
    interface FwButtonGroup {
        "label"?: string;
    }
    interface FwCheckbox {
        /**
          * Sets the state of the check box to selected. If the attribute’s value is undefined, the value is set to false.
         */
        "checked"?: boolean;
        /**
          * Description to be displayed for the checkbox.
         */
        "description"?: string;
        /**
          * Disables the check box on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled"?: boolean;
        /**
          * Error text displayed below the radio group.
         */
        "errorText"?: string;
        /**
          * /**   Hint text displayed below the radio group.
         */
        "hintText"?: string;
        /**
          * @deprecated Use `description` instead. Label displayed on the interface, for the check box.
         */
        "label"?: string;
        /**
          * Name of the component, saved as part of form data.
         */
        "name"?: string;
        /**
          * Triggered when the check box loses focus.
         */
        "onFwBlur"?: (event: FwCheckboxCustomEvent<any>) => void;
        /**
          * Triggered when the checkbox state is modified.
         */
        "onFwChange"?: (event: FwCheckboxCustomEvent<any>) => void;
        /**
          * Triggered when the check box comes into focus.
         */
        "onFwFocus"?: (event: FwCheckboxCustomEvent<void>) => void;
        /**
          * Specifies the input box as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.
         */
        "required"?: boolean;
        /**
          * Theme based on which the checkbox is styled.
         */
        "state"?: 'normal' | 'warning' | 'error';
        /**
          * Identifier corresponding to the component, that is saved when the form data is saved.
         */
        "value"?: string;
        /**
          * Warning text displayed below the radio group.
         */
        "warningText"?: string;
    }
    interface FwCountryPhone {
        /**
          * Displays a right-justified clear icon in the text box. Clicking the icon clears the input text. If the attribute’s value is undefined, the value is set to false. For a read-only input box, the clear icon is not displayed unless a default value is specified for the input box.
         */
        "clearInput"?: boolean;
        /**
          * Default countryCode to be displayed.
         */
        "countryCodeDefaultValue"?: string;
        /**
          * Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled"?: boolean;
        /**
          * Error text displayed below the text box.
         */
        "errorText"?: string;
        /**
          * Hide Country Flag in the Country Select
         */
        "hideCountryFlag"?: boolean;
        /**
          * Hide Country Name in the Country Select
         */
        "hideCountryName"?: boolean;
        /**
          * Hint text displayed below the text box.
         */
        "hintText"?: string;
        /**
          * * Label displayed on the interface, for the input component.
         */
        "inputLabel"?: string | null;
        /**
          * Text displayed in the text box before a user enters a value.
         */
        "inputPlaceholder"?: string | null;
        /**
          * Name of the component, saved as part of form data.
         */
        "name"?: string;
        /**
          * Triggered when phone element is blur.
         */
        "onFwBlur"?: (event: FwCountryPhoneCustomEvent<any>) => void;
        /**
          * Triggered when input is focused.
         */
        "onFwFocus"?: (event: FwCountryPhoneCustomEvent<any>) => void;
        /**
          * Triggered when phone element is input.
         */
        "onFwInput"?: (event: FwCountryPhoneCustomEvent<any>) => void;
        /**
          * Triggered when clear icon is clicked.
         */
        "onFwInputClear"?: (event: FwCountryPhoneCustomEvent<any>) => void;
        /**
          * If true, the user cannot enter a value in the input box. If the attribute’s value is undefined, the value is set to false.
         */
        "readonly"?: boolean;
        /**
          * Specifies the input box as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.
         */
        "required"?: boolean;
        /**
          * * Label displayed on the interface, for the input component.
         */
        "selectLabel"?: string | null;
        /**
          * Text displayed in the text box before a user enters a value.
         */
        "selectPlaceholder"?: string | null;
        /**
          * Theme based on which the text box is styled.
         */
        "state"?: 'normal' | 'warning' | 'error';
        /**
          * Default value displayed in the input box & select dropdown after extracting valid phone number
         */
        "value"?: string | null;
        /**
          * Warning text displayed below the text box.
         */
        "warningText"?: string;
    }
    interface FwCustomCellAnchor {
        "href"?: string;
        "target"?: string;
        "text"?: string;
    }
    interface FwCustomCellIcon {
        "color"?: string;
        "library"?: string;
        "name"?: string;
        "size"?: number;
        "src"?: any;
    }
    interface FwCustomCellParagraph {
        /**
          * text to display inside the cell
         */
        "text"?: string;
    }
    interface FwCustomCellUser {
        "alt"?: string;
        "email"?: string;
        "image"?: any;
        "name"?: string;
    }
    interface FwDataTable {
        /**
          * autoSaveSettings to enable auto saving of table settings to `localstorage`. If set to `true`, make sure `id` attribute is also set to the `data-table`
         */
        "autoSaveSettings"?: boolean;
        /**
          * Columns Array of objects that provides information regarding the columns in the table.
         */
        "columns"?: DataTableColumn[];
        /**
          * isAllSelectable Boolean based on which select all option appears in the table header
         */
        "isAllSelectable"?: boolean;
        /**
          * To disable table during async operations
         */
        "isLoading"?: boolean;
        /**
          * isSelectable Boolean based on which selectable options appears for rows in the table.
         */
        "isSelectable"?: boolean;
        /**
          * Label attribute is not visible on screen. There for accessibility purposes.
         */
        "label"?: string;
        /**
          * fwSelectAllChange Emits this event when select all is checked.
         */
        "onFwSelectAllChange"?: (event: FwDataTableCustomEvent<any>) => void;
        /**
          * fwSelectionChange Emits this event when row is selected/unselected.
         */
        "onFwSelectionChange"?: (event: FwDataTableCustomEvent<any>) => void;
        /**
          * To enable bulk actions on the table.
         */
        "rowActions"?: | DataTableAction[]
    | DataTableActionWithGraphics[];
        /**
          * Header label for row actions column
         */
        "rowActionsHeaderLabel"?: any;
        /**
          * Standard is the default option without any graphics other option is icon which places the icon at the beginning of the row. The props for the icon are passed as iconName and iconLibrary via the rowActions prop.
         */
        "rowActionsMenuVariant"?: 'standard' | 'icon';
        /**
          * Ability to add width related properties to rowActions. Helps solve settings icon overlap with actions label.
         */
        "rowActionsWidthProperties"?: null | WidthStyles;
        /**
          * Rows Array of objects to be displayed in the table.
         */
        "rows"?: DataTableRow[];
        /**
          * shimmerCount number of shimmer rows to show during initial loading
         */
        "shimmerCount"?: number;
        /**
          * To show row actions as a kebab menu
         */
        "showRowActionsAsMenu"?: boolean;
        /**
          * showSettings is used to show the settings button on the table.
         */
        "showSettings"?: boolean;
    }
    interface FwDatepicker {
        "cancelText"?: string;
        /**
          * Displays a clear icon in the text box. Clicking the icon clears the value. Default `false`
         */
        "clearInput"?: boolean;
        /**
          * Debounce timer for date input.
         */
        "debounceTimer"?: number;
        /**
          * Make the datepicker box as disabled. Default `false`
         */
        "disabled"?: boolean;
        /**
          * Format in which the date values selected in the calendar are populated in the input box. Defaults to the locale specific display format.
         */
        "displayFormat"?: string;
        /**
          * Error text displayed below the text box.
         */
        "errorText"?: string;
        /**
          * Starting date of the date range that is preselected in the calendar, if mode is range. Must be a date later than the min-date value and valid ISO date format.
         */
        "fromDate"?: string;
        /**
          * To make the datepicker occupy full width of the container. Default value is false.
         */
        "fullWidth"?: boolean;
        /**
          * Hint text displayed below the text box.
         */
        "hintText"?: string;
        /**
          * Option to prevent the tooltip from being clipped when the component is placed inside a container with `overflow: auto|hidden|scroll`.
         */
        "hoistTooltip"?: boolean;
        /**
          * Label displayed on the interface, for the component.
         */
        "label"?: string;
        /**
          * Locale for which datepicker needs to be shown. Defaults to browser's current locale.
         */
        "locale"?: string;
        /**
          * Latest date a user can select in the calendar, if mode is range. Must be a valid ISO date format if set.
         */
        "maxDate"?: string;
        /**
          * Maximum year that needs to be displayed in the year dropdown.
         */
        "maxYear"?: number;
        /**
          * Earliest date a user can select in the calendar, if mode is range. Must be a valid ISO date format if set.
         */
        "minDate"?: string;
        /**
          * Minimum year that needs to be displayed in the year dropdown.
         */
        "minYear"?: number;
        /**
          * Type of date selection enabled for the calendar. If the value is range, a user can select a date range in the calendar.
         */
        "mode"?: 'single date' | 'range';
        /**
          * Name of the component, saved as part of form data.
         */
        "name"?: string;
        /**
          * Triggered when the input box loses focus.
         */
        "onFwBlur"?: (event: FwDatepickerCustomEvent<any>) => void;
        /**
          * Triggered when the update button clicked
         */
        "onFwChange"?: (event: FwDatepickerCustomEvent<any>) => void;
        /**
          * Triggered when text is entered in  input box.
         */
        "onFwDateInput"?: (event: FwDatepickerCustomEvent<any>) => void;
        /**
          * Text displayed in the input box before a user selects a date or date range.
         */
        "placeholder"?: string;
        /**
          * Make the input box as readonly. Default `false`
         */
        "readonly"?: boolean;
        /**
          * Specifies the input box as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.
         */
        "required"?: boolean;
        /**
          * Displays alert icon and tooltip when user inputs an invalid date in the textbox. Default value is true.
         */
        "showErrorOnInvalidDate"?: boolean;
        /**
          * Indicates if footer needs to be shown. Default `true`.
         */
        "showFooter"?: boolean;
        /**
          * Whether the time-picker should be shown in the date-picker. Supports single date picker only.
         */
        "showTimePicker"?: boolean;
        /**
          * Theme based on which the input of the datepicker is styled.
         */
        "state"?: 'normal' | 'warning' | 'error';
        /**
          * The format of time picker .
         */
        "timeFormat"?: string;
        /**
          * The props for the time picker. Refer the fw-timepicker for valid format.
         */
        "timeProps"?: {};
        /**
          * Ending date of the date range that is preselected in the calendar, if mode is range. Must be a date earlier than the max-date value and valid ISO date format.
         */
        "toDate"?: string;
        /**
          * Error text displayed on the tooltip for invalid date inputs.
         */
        "tooltipErrorText"?: any;
        "updateText"?: string;
        /**
          * Date that is preselected in the calendar, if mode is single date or undefined. If set this must be valid ISO date format.
         */
        "value"?: string;
        /**
          * Warning text displayed below the text box.
         */
        "warningText"?: string;
    }
    interface FwDragContainer {
        /**
          * Id of the fw-sortable element from which draggable content can be accepted. Add comma separated id's for multiple containers.
         */
        "acceptFrom"?: string;
        /**
          * Whether the drag element should be added to the container on drop. If set to false, the placeholder will be retained.
         */
        "addOnDrop"?: boolean;
        /**
          * Whether the drag element should be moved or copied.
         */
        "copy"?: boolean;
        /**
          * Triggered when a draggable item enters the container.
         */
        "onFwDragEnter"?: (event: FwDragContainerCustomEvent<void>) => void;
        /**
          * Triggered when a draggable item leaves the container.
         */
        "onFwDragLeave"?: (event: FwDragContainerCustomEvent<void>) => void;
        /**
          * Triggered when a draggable item is dropped inside the container.
         */
        "onFwDrop"?: (event: FwDragContainerCustomEvent<void>) => void;
        /**
          * The class name for the drag/drop placeholder. Add space separated class names for multiple classes
         */
        "placeholderClass"?: string;
        /**
          * Whether the list should be sortable.
         */
        "sortable"?: boolean;
    }
    interface FwDragItem {
        /**
          * Whether the drag is disabled or not.
         */
        "disabled"?: boolean;
        /**
          * Pinned position of the drag item, other drag item cannot be placed above or below it.
         */
        "pinned"?: 'top' | 'bottom';
        /**
          * Whether the drag icon should be visible.
         */
        "showDragIcon"?: boolean;
    }
    interface FwFile2 {
        /**
          * Boolean value to set if the attachment is added in library or not
         */
        "addedToLibrary"?: boolean;
        /**
          * To enable library adding related feature
         */
        "enableLibraryAdding"?: boolean;
        /**
          * Error message text to display below the attachment
         */
        "errorMessage"?: string;
        /**
          * Index order of the attachment file starting from 0
         */
        "index"?: number;
        /**
          * Set private mode for different styles
         */
        "isPrivateMode"?: boolean;
        /**
          * Name of the attachment file to be displayed (including the file extension)
         */
        "label"?: string;
        /**
          * Event triggered to delete the attachment file
         */
        "onFwDelete"?: (event: FwFile2CustomEvent<any>) => void;
        /**
          * Event triggered to add / remove file from the library
         */
        "onFwModifyLibrary"?: (event: FwFile2CustomEvent<any>) => void;
        /**
          * Event triggered to reupload
         */
        "onFwReupload"?: (event: FwFile2CustomEvent<any>) => void;
        /**
          * Boolean used to display size as passed or convert them to relatives like KB, MB etc...
         */
        "parseSize"?: boolean;
        /**
          * Size of the attachment in bytes
         */
        "size"?: number;
        /**
          * State of the attachment for styling
         */
        "state"?: 'normal' | 'loading' | 'error' | 'failed';
        /**
          * File type
         */
        "type"?: string | null;
        /**
          * Value or id related to the attached file
         */
        "value"?: any;
    }
    interface FwFileUploader {
        /**
          * accept - comma separated string. tells us what file formats file uploader should accept.
         */
        "accept"?: string;
        /**
          * acceptError - Error message to display when format is invalid.
         */
        "acceptError"?: any;
        /**
          * actionParams - additional information to send to server other than the file.
         */
        "actionParams"?: any;
        /**
          * actionURL - URL to make server call.
         */
        "actionURL"?: string;
        /**
          * description - file uploader description.
         */
        "description"?: any;
        /**
          * fileUploadError - Error message when a file upload fails.
         */
        "fileUploadError"?: any;
        /**
          * Max files allowed to upload.
         */
        "filesLimit"?: number;
        /**
          * hint - file uploader hint text.
         */
        "hint"?: string;
        /**
          * maxFileSize - maximum file size the file uploader must accept.
         */
        "maxFileSize"?: number;
        /**
          * maxFileSizeError - Error message to display when file size exceeds limit
         */
        "maxFileSizeError"?: any;
        /**
          * maxFilesLimitError - Error message when going beyond files limit.
         */
        "maxFilesLimitError"?: any;
        /**
          * modify request
          * @param xhr
          * @returns xhr
         */
        "modifyRequest"?: (xhr: any) => any;
        /**
          * multiple - upload multiple files.
         */
        "multiple"?: boolean;
        /**
          * name - field name
         */
        "name"?: string;
        /**
          * fileReuploaded - event that gets emitted when file is reuploaded
         */
        "onFwFileReuploaded"?: (event: FwFileUploaderCustomEvent<any>) => void;
        /**
          * filesUploaded - event that gets emitted when files get uploaded
         */
        "onFwFilesUploaded"?: (event: FwFileUploaderCustomEvent<any>) => void;
        /**
          * stageChanged - event that gets emitted when component stage changes
         */
        "onFwStageChanged"?: (event: FwFileUploaderCustomEvent<any>) => void;
        /**
          * text - file uploader text.
         */
        "text"?: any;
    }
    interface FwFileUploader2 {
        /**
          * accept - comma separated string. tells us what file formats file uploader should accept.
         */
        "accept"?: string;
        /**
          * acceptError - Error message to display when format is invalid.
         */
        "acceptError"?: any;
        /**
          * actionParams - additional information to send to server other than the file.
         */
        "actionParams"?: { [prop: string]: any };
        /**
          * actionURL - URL to make server call.
         */
        "actionURL"?: string;
        /**
          * description - file uploader description.
         */
        "description"?: any;
        /**
          * errorText - errorText collection. Mutable as this can be set from form control too based on form validations.
         */
        "errorText"?: string;
        /**
          * fileUploadError - Error message when a file upload fails.
         */
        "fileUploadError"?: any;
        /**
          * Max files allowed to upload.
         */
        "filesLimit"?: number;
        /**
          * Use this prop to show the label on the component.
         */
        "hideLabel"?: boolean;
        /**
          * Inline information text, hint text.
         */
        "hintText"?: string;
        /**
          * to load default values in file uploader component.
         */
        "initialFiles"?: InitialUploaderFile[];
        /**
          * Upload all files in one single shot
         */
        "isBatchUpload"?: boolean;
        /**
          * To maintain the same label styling as other form elements.
         */
        "isFormLabel"?: boolean;
        /**
          * maxFileSize - maximum file size the file uploader must accept.
         */
        "maxFileSize"?: number;
        /**
          * maxFileSizeError - Error message to display when file size exceeds limit
         */
        "maxFileSizeError"?: any;
        /**
          * maxFilesLimitError - Error message when going beyond files limit.
         */
        "maxFilesLimitError"?: any;
        /**
          * modify request
          * @param xhr
          * @returns xhr
         */
        "modifyRequest"?: (xhr: XMLHttpRequest) => XMLHttpRequest;
        /**
          * multiple - upload multiple files.
         */
        "multiple"?: boolean;
        /**
          * name - field name
         */
        "name"?: string;
        /**
          * Triggered whenever files change.
         */
        "onFwChange"?: (event: FwFileUploader2CustomEvent<any>) => void;
        /**
          * Triggered for a particular file change.
         */
        "onFwFileChange"?: (event: FwFileUploader2CustomEvent<any>) => void;
        /**
          * Triggered during a file reupload.
         */
        "onFwFileReuploaded"?: (event: FwFileUploader2CustomEvent<any>) => void;
        /**
          * Triggered after file upload if not a batch upload.
         */
        "onFwFileUploaded"?: (event: FwFileUploader2CustomEvent<any>) => void;
        /**
          * Triggered after batch upload, when all files are uploaded.
         */
        "onFwFilesUploaded"?: (event: FwFileUploader2CustomEvent<any>) => void;
        /**
          * field acts as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.
         */
        "required"?: boolean;
        /**
          * restrict the width of the attachment in the file uploader
         */
        "restrictAttachmentBlock"?: boolean;
        /**
          * Use a simple interface for the single file mode.
         */
        "simpleInterfaceForSingleMode"?: boolean;
        /**
          * text - file uploader text.
         */
        "text"?: any;
        /**
          * Max total size allowed for upload
         */
        "totalFileSizeAllowed"?: number;
        /**
          * totalFileSizeAllowedError - Total file size (combination of all files) allowed for upload.
         */
        "totalFileSizeAllowedError"?: any;
    }
    interface FwFileUploaderFile {
        /**
          * file Id
         */
        "fileId"?: number;
        /**
          * file name
         */
        "name"?: string;
        /**
          * removeFile - event that gets triggered on file removal
         */
        "onFwRemoveFile"?: (event: FwFileUploaderFileCustomEvent<any>) => void;
    }
    interface FwFileUploaderProgress {
        /**
          * error text for the file upload
         */
        "error"?: string;
        /**
          * file Id
         */
        "fileId": number;
        /**
          * file name
         */
        "fileName"?: string;
        /**
          * retryUpload event to emit in case of a retry
         */
        "onFwRetryUpload"?: (event: FwFileUploaderProgressCustomEvent<any>) => void;
        /**
          * file upload progress
         */
        "progress"?: number;
    }
    interface FwForm {
        /**
          * A custom type mapper object that maps the type of your fields in the schema to the Internal Field Types. Internal Field Types are `TEXT`, `DROPDOWN`, `EMAIL` etc. In the example below, `1` is the type of a field in your schema that needs to correspond to `TEXT` type. Please pass include the mapper for all the field types that you want to support. Example typeMapper object : {      'CUSTOM_TEXT': { type: 'TEXT' },      'SELECT': { type: 'DROPDOWN' },      'TEL': { type: 'PHONE_NUMBER' },      'CHECKBOX': { type: 'CHECKBOX' },      'TEXTAREA': { type: 'PARAGRAPH' },      'DATETIME': { type: 'DATE_TIME' },      'INTEGER': { type: 'NUMBER' },    }
         */
        "customTypeMapper"?: any;
        /**
          * Id to uniquely identify the Form. If not set, a random Id will be generated.
         */
        "formId"?: any;
        /**
          * Schema to render Dynamic Form. Contains an array of fields pointing to each form control. Please see the usage reference for examples.
         */
        "formSchema"?: any;
        /**
          * Initial field values of the form. It is an object with keys pointing to field name
         */
        "initialValues"?: any;
        /**
          * Mapper Type - LEGO | FORMSERV | CUSTOM. Defaults to `LEGO`.
         */
        "mapperType"?: 'LEGO' | 'FORMSERV' | 'CUSTOM';
        /**
          * fwFormValueChanged - event that gets emitted when value in a form field changes.
         */
        "onFwFormValueChanged"?: (event: FwFormCustomEvent<any>) => void;
        /**
          * fwFormValuesChanged - event that gets emitted when values change.
         */
        "onFwFormValuesChanged"?: (event: FwFormCustomEvent<any>) => void;
        /**
          * Validate the form's values with an async function. Should return a Promise which resolves to an errors object. The keys in the errors object must match with the field names.
         */
        "validate"?: any;
        /**
          * Tells Form to validate the form on each input's onBlur event
         */
        "validateOnBlur"?: boolean;
        /**
          * Tells Form to validate the form on each input's onInput event
         */
        "validateOnInput"?: boolean;
        /**
          * YUP based validation schema for handling validation
         */
        "validationSchema"?: any;
        /**
          * The number of milliseconds to delay before doing validation on Input
         */
        "wait"?: number;
    }
    interface FwFormControl {
        "choices"?: any;
        /**
          * Contains values for crayons components. Useful when rendering crayons components implicitly via form-control. Not required when using controls via slots.
         */
        "controlProps"?: any;
        /**
          * Disable the field from being editable
         */
        "disabled"?: boolean;
        "error"?: string;
        /**
          * Additional props can be passed here for crayons components. Useful when rendering crayons components implicitly via form-control.
         */
        "fieldProps"?: any;
        "hidden"?: boolean;
        "hint"?: string;
        "label"?: any;
        "name"?: any;
        "placeholder"?: string;
        "required"?: boolean;
        /**
          * Prop to determine whether to render the form-control or not. Default to true.
         */
        "shouldRender"?: boolean;
        "touched"?: boolean;
        "type"?: | 'TEXT'
    | 'NUMBER'
    | 'DECIMAL'
    | 'DROPDOWN'
    | 'MULTI_SELECT'
    | 'RADIO'
    | 'CHECKBOX'
    | 'DATE'
    | 'PARAGRAPH'
    | 'EMAIL'
    | 'URL'
    | 'TEL'
    | 'TIME'
    | 'DATE_TIME'
    | 'RELATIONSHIP'
    | 'AUTO_COMPLETE'
    | 'DEPENDENT_FIELD'
    | 'FILES';
        /**
          * Value of the slotted custom field on fw-form-control
         */
        "value"?: any;
    }
    interface FwFormatDate {
        /**
          * The date/time to format. If not set, the current date and time will be used.
         */
        "date"?: Date | string | number;
        /**
          * The format for displaying the day.
         */
        "day"?: 'numeric' | '2-digit';
        /**
          * The format for displaying the hour.
         */
        "hour"?: 'numeric' | '2-digit';
        /**
          * When set, 24 hour time will always be used.
         */
        "hourFormat"?: 'auto' | '12' | '24';
        /**
          * The locale to use when formatting the date/time.
         */
        "locale"?: string;
        /**
          * The format for displaying the minute.
         */
        "minute"?: 'numeric' | '2-digit';
        /**
          * The format for displaying the month.
         */
        "month"?: 'numeric' | '2-digit' | 'narrow' | 'short' | 'long';
        /**
          * The format for displaying the second.
         */
        "second"?: 'numeric' | '2-digit';
        /**
          * The time zone to express the time in.
         */
        "timeZone"?: string;
        /**
          * The format for displaying the time.
         */
        "timeZoneName"?: 'short' | 'long';
        /**
          * The format for displaying the weekday.
         */
        "weekday"?: 'narrow' | 'short' | 'long';
        /**
          * The format for displaying the year.
         */
        "year"?: 'numeric' | '2-digit';
    }
    interface FwFormatNumber {
        /**
          * The currency to use in currency formatting. Possible values are the `ISO 4217` currency codes, such as `USD` for the US dollar, `EUR` for the euro. If the style is "currency", the currency property must be provided.
         */
        "currency"?: string;
        /**
          * Currency display formatting.
         */
        "currencyDisplay"?: 'symbol' | 'narrowSymbol' | 'code' | 'name';
        /**
          * In many locales, accounting format means to wrap the number with parentheses instead of appending a minus sign. You can enable the above by setting the currencySign option to `accounting`. The default value is `standard`
         */
        "currencySign"?: 'accounting' | 'standard';
        /**
          * `Locale` used for formatting the number
         */
        "locale"?: string;
        /**
          * The maximum number of fraction digits to use. Possible values are 0 - 20.
         */
        "maximumFractionDigits"?: number;
        /**
          * The maximum number of significant digits to use,. Possible values are 1 - 21. Default is 21
         */
        "maximumSignificantDigits"?: number;
        /**
          * The minimum number of fraction digits to use. Possible values are 0 - 20.
         */
        "minimumFractionDigits"?: number;
        /**
          * The minimum number of integer digits to use. Possible values are 1 - 21. Default is 1
         */
        "minimumIntegerDigits"?: number;
        /**
          * The minimum number of significant digits to use. Possible values are 1 - 21. Default is 1
         */
        "minimumSignificantDigits"?: number;
        /**
          * Formatting style
         */
        "type"?: 'currency' | 'decimal' | 'percent';
        /**
          * Turns on/off grouping separators.
         */
        "useGrouping"?: boolean;
        /**
          * Number to format.
         */
        "value"?: number;
    }
    interface FwIcon {
        /**
          * Color in which the icon is displayed, specified as a standard CSS color or as a HEX code.
         */
        "color"?: string;
        /**
          * Identifier of the icon. The attribute’s value must be a valid JS Import Name of the svg in the named export from @freshworks/crayons-icon.
         */
        "dataSvg"?: string;
        /**
          * Height of the icon, specified in number of  pixels.
         */
        "height"?: number;
        /**
          * An alternate description to use for accessibility. If omitted, the icon will be ignored by assistive devices.
         */
        "label"?: string;
        /**
          * Enable Intersection Observer. Default is false.
         */
        "lazy"?: boolean;
        /**
          * Name of External Library to be used
         */
        "library"?: string;
        /**
          * Identifier of the icon. The attribute’s value must be a valid svg Name in the Crayons-Icon set.
         */
        "name"?: string;
        /**
          * Size of the icon, specified in number of  pixels. This will be square coordinates of (w X h) = size X size
         */
        "size"?: number;
        /**
          * Identifier of the icon. The attribute’s value must be a valid path to svg file.
         */
        "src"?: string;
        /**
          * Identifier of the icon. The attribute’s value must be a valid url of the svg icon.
         */
        "url"?: string;
        /**
          * Width of the icon, specified in number of  pixels.
         */
        "width"?: number;
        /**
          * Root Margin in px or percentage for Intersection-Observer. This means from ref to bottom of loaded view , the item loads when it crosses above the negative y margin.
         */
        "xRootMargin"?: string;
    }
    interface FwInlineMessage {
        /**
          * Makes the inline message closable.
         */
        "closable"?: boolean;
        /**
          * The duration in milliseconds for which inline message will be shown.
         */
        "duration"?: number;
        /**
          * Triggered when inline message is hidden.
         */
        "onFwHide"?: (event: FwInlineMessageCustomEvent<any>) => void;
        /**
          * Triggered when inline message is shown.
         */
        "onFwShow"?: (event: FwInlineMessageCustomEvent<any>) => void;
        /**
          * Indicates whether the inline message is open or not.
         */
        "open"?: boolean;
        /**
          * The type of inline message to be displayed. Defaults to info.
         */
        "type"?: 'success' | 'warning' | 'info' | 'error';
    }
    interface FwInput {
        /**
          * Specifies whether the browser can display suggestions to autocomplete the text value.
         */
        "autocomplete"?: 'on' | 'off';
        /**
          * Displays a right-justified clear icon in the text box. Clicking the icon clears the input text. If the attribute’s value is undefined, the value is set to false. For a read-only input box, the clear icon is not displayed unless a default value is specified for the input box.
         */
        "clearInput"?: boolean;
        /**
          * Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled"?: boolean;
        /**
          * Error text displayed below the text box.
         */
        "errorText"?: string;
        /**
          * Hint text displayed below the text box.
         */
        "hintText"?: string;
        /**
          * Identifier of the icon that is displayed in the left side of the text box. The attribute’s value must be a valid svg file in the repo of icons (assets/icons).
         */
        "iconLeft"?: string;
        /**
          * Identifier of the icon that is displayed in the right side of the text box. The attribute’s value must be a valid svg file in the repo of icons (assets/icons).
         */
        "iconRight"?: string;
        /**
          * Label displayed on the interface, for the component.
         */
        "label"?: string;
        /**
          * Specifies a maximum value that can be entered for the number/decimal input.
         */
        "max"?: number;
        /**
          * Maximum number of characters a user can enter in the text box.
         */
        "maxlength"?: number;
        /**
          * Specifies a minimum value that can be entered for the number/decimal input.
         */
        "min"?: number;
        /**
          * Minimum number of characters a user must enter in the text box for the value to be valid.
         */
        "minlength"?: number;
        /**
          * Name of the component, saved as part of form data.
         */
        "name"?: string;
        /**
          * Triggered when the input box loses focus.
         */
        "onFwBlur"?: (event: FwInputCustomEvent<any>) => void;
        /**
          * Triggered when the input box comes into focus.
         */
        "onFwFocus"?: (event: FwInputCustomEvent<void>) => void;
        /**
          * Triggered when a value is entered in the input box.
         */
        "onFwInput"?: (event: FwInputCustomEvent<any>) => void;
        /**
          * Triggered when clear icon is clicked.
         */
        "onFwInputClear"?: (event: FwInputCustomEvent<any>) => void;
        /**
          * Triggered on key down in the input box.
         */
        "onFwInputKeyDown"?: (event: FwInputCustomEvent<any>) => void;
        /**
          * Text displayed in the text box before a user enters a value.
         */
        "placeholder"?: string | null;
        /**
          * If true, the user cannot enter a value in the input box. If the attribute’s value is undefined, the value is set to false.
         */
        "readonly"?: boolean;
        /**
          * Specifies the input box as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.
         */
        "required"?: boolean;
        /**
          * Theme based on which the text box is styled.
         */
        "state"?: 'normal' | 'warning' | 'error';
        /**
          * The step attribute is used when the type is `number`. It specifies the interval between legal numbers in a number/decimal input element. Works with the min and max attributes to limit the increments at which a value can be set. Possible values are `any` or a positive floating point number. Default value is `any`
         */
        "step"?: string;
        /**
          * Type of value accepted as the input value. If a user enters a value other than the specified type, the input box is not populated.
         */
        "type"?: 'text' | 'number' | 'email' | 'url';
        /**
          * Default value displayed in the input box.
         */
        "value"?: string | null;
        /**
          * Warning text displayed below the text box.
         */
        "warningText"?: string;
    }
    interface FwKebabMenu {
        /**
          * fwSelect event is emitted when an option is clicked from the list.
         */
        "onFwSelect"?: (event: FwKebabMenuCustomEvent<any>) => void;
        /**
          * The data for the kebab menu component, the options will be of type array of fw-select-options.
         */
        "options"?: any[];
        /**
          * Standard is the default option without any graphics other option is icon which places the icon at the beginning of the row. The props for the icon are passed as an object via the graphicsProps.
         */
        "variant"?: 'standard' | 'icon';
    }
    interface FwLabel {
        /**
          * Theme based on which the label is styled.
         */
        "color"?: 'blue' | 'red' | 'green' | 'yellow' | 'grey' | 'normal';
        /**
          * Display text in the label.
         */
        "value"?: string;
    }
    interface FwListOptions {
        /**
          * Whether clicking on the already selected option disables it.
         */
        "allowDeselect"?: boolean;
        /**
          * Whether clicking on option selects it.
         */
        "allowSelect"?: boolean;
        /**
          * Place a checkbox.
         */
        "checkbox"?: boolean;
        /**
          * Debounce timer for the search promise function.
         */
        "debounceTimer"?: number;
        /**
          * Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled"?: boolean;
        /**
          * Virtualize long list of elements in list options *Experimental*
         */
        "enableVirtualScroll"?: boolean;
        /**
          * Works only when 'enableVirtualScroll' is true. Estimated size of each item in the list box to ensure smooth-scrolling.
         */
        "estimatedSize"?: number;
        /**
          * The text to filter the options.
         */
        "filterText"?: any;
        /**
          * Works only when 'isCreatable' is selected. Function to format the create label displayed as an option.
         */
        "formatCreateLabel"?: (value: string) => string;
        /**
          * hide tick mark icon on select option
         */
        "hideTick"?: boolean;
        /**
          * Allows user to create the option if the provided input doesn't match with any of the options.
         */
        "isCreatable"?: boolean;
        /**
          * Works with `multiple` enabled. Configures the maximum number of options that can be selected with a multi-select component.
         */
        "max"?: number;
        /**
          * Enables selection of multiple options. If the attribute’s value is undefined, the value is set to false.
         */
        "multiple"?: boolean;
        /**
          * Text to be displayed when there is no data available in the select.
         */
        "noDataText"?: string;
        /**
          * Default option to be shown if the option doesn't match the filterText.
         */
        "notFoundText"?: string;
        /**
          * Triggered when a value is selected or deselected from the list box options.
         */
        "onFwChange"?: (event: FwListOptionsCustomEvent<any>) => void;
        /**
          * Triggered when the options list is in loading state processing the search function.
         */
        "onFwLoading"?: (event: FwListOptionsCustomEvent<any>) => void;
        /**
          * Key for determining the label for a given option
         */
        "optionLabelPath"?: string;
        /**
          * Key for determining the value for a given option
         */
        "optionValuePath"?: string;
        /**
          * Value corresponding to the option, that is saved  when the form data is saved.
         */
        "options"?: any[];
        /**
          * Filter function which takes in filterText and dataSource and return a Promise. Where filter text is the text to filter the value in dataSource array. The returned promise should contain the array of options to be displayed.
         */
        "search"?: (text: string, dataSource: any[]) => Promise<any[]>;
        /**
          * Placeholder to placed on the search text box.
         */
        "searchText"?: string;
        /**
          * Enables the input with in the popup for filtering the options.
         */
        "searchable"?: boolean;
        /**
          * The option that is displayed as the default selection, in the list box. Must be a valid value corresponding to the fw-select-option components used in Select.
         */
        "selectedOptions"?: any[];
        /**
          * Works only when 'isCreatable' is selected. Function to validate the newly created value. Should return true if new option is valid or false if invalid.
         */
        "validateNewOption"?: (value: string) => boolean;
        /**
          * Value of the option that is displayed as the default selection, in the list box. Must be a valid value corresponding to the fw-select-option components used in Select.
         */
        "value"?: any;
        /**
          * Standard is the default option without any graphics other options are icon and avatar which places either the icon or avatar at the beginning of the row. The props for the icon or avatar are passed as an object via the graphicsProps.
         */
        "variant"?: DropdownVariant;
    }
    interface FwMenu {
    }
    interface FwMenuItem {
        /**
          * Sets the state of the option to selected. The selected option is highlighted and a check mark is displayed next to it. If the attribute’s value is undefined, the value is set to false.
         */
        "selectable"?: boolean;
        /**
          * Sets the state of the option to selected. The selected option is highlighted and a check mark is displayed next to it. If the attribute’s value is undefined, the value is set to false.
         */
        "selected"?: boolean;
    }
    interface FwModal {
        /**
          * The text for the cancel button
         */
        "cancelText"?: string;
        /**
          * The description text to be displayed on the modal
         */
        "description"?: string;
        /**
          * Property to add or remove the top right close icon button
         */
        "hasCloseIconButton"?: boolean;
        /**
          * Hide footer for the modal
         */
        "hideFooter"?: boolean;
        /**
          * The icon to be displayed with the title
         */
        "icon"?: string;
        /**
          * Toggle the visibility of the modal
         */
        "isOpen"?: boolean;
        /**
          * Triggered when modal is closed.
         */
        "onFwClose"?: (event: FwModalCustomEvent<void>) => void;
        /**
          * Triggered when modal is opened.
         */
        "onFwOpen"?: (event: FwModalCustomEvent<void>) => void;
        /**
          * Triggered when the default action button is clicked.
         */
        "onFwSubmit"?: (event: FwModalCustomEvent<void>) => void;
        /**
          * Size of the modal
         */
        "size"?: 'standard' | 'small' | 'large';
        /**
          * Convert modal to slider
         */
        "slider"?: boolean;
        /**
          * The color of submit button
         */
        "submitColor"?: 'primary' | 'secondary' | 'danger' | 'link' | 'text';
        /**
          * Default state of submit button
         */
        "submitDisabled"?: boolean;
        /**
          * The text for the submit button
         */
        "submitText"?: string;
        /**
          * The title text to be displayed on the modal
         */
        "titleText"?: string;
    }
    interface FwModalContent {
    }
    interface FwModalFooter {
        /**
          * The text for the cancel button
         */
        "cancelText"?: string;
        /**
          * Function to call on close of modal
         */
        "close"?: any;
        /**
          * Function to call on submit of modal
         */
        "submit"?: any;
        /**
          * The color of submit button
         */
        "submitColor"?: 'primary' | 'secondary' | 'danger' | 'link' | 'text';
        /**
          * Default state of submit button
         */
        "submitDisabled"?: boolean;
        /**
          * The text for the submit button
         */
        "submitText"?: string;
    }
    interface FwModalTitle {
        /**
          * The title text to be displayed on the modal
         */
        "description"?: string;
        /**
          * The icon to be displayed with the title
         */
        "icon"?: string;
        /**
          * The title text to be displayed on the modal
         */
        "titleText"?: string;
    }
    interface FwNestedNode {
        /**
          * Error text displayed below the text box.
         */
        "errorText"?: string;
        /**
          * Hint text displayed below the text box.
         */
        "hintText"?: string;
        /**
          * label
         */
        "label"?: string;
        /**
          * level to keep track of selected options and reset on parent option changes
         */
        "level"?: number;
        /**
          * Name of the field value gets updated to
         */
        "name"?: string;
        "onFwPropertyChange"?: (event: FwNestedNodeCustomEvent<any>) => void;
        /**
          * optionLabelPath
         */
        "optionLabelPath"?: string;
        /**
          * OptionValue path
         */
        "optionValuePath"?: string;
        /**
          * Options to pass through and loop
         */
        "options"?: any[];
        /**
          * Specifies the select field as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.
         */
        "required"?: boolean;
        /**
          * Fn to return initialValues from properties
         */
        "selectProps"?: any;
        /**
          * Theme based on which the list box is styled.
         */
        "state"?: 'normal' | 'warning' | 'error';
        /**
          * Current selected value if passed from initialvalues
         */
        "value"?: string;
        /**
          * Warning text displayed below the text box.
         */
        "warningText"?: string;
    }
    interface FwNestedSelect {
        /**
          * Error text displayed below the text box.
         */
        "errorText"?: string;
        /**
          * Hint text displayed below the text box.
         */
        "hintText"?: string;
        /**
          * label
         */
        "label"?: string;
        /**
          * Name of first level field
         */
        "name"?: string;
        /**
          * Triggered when nested selection doesn't have choices
         */
        "onFwChange"?: (event: FwNestedSelectCustomEvent<any>) => void;
        /**
          * OptionLabelPath referred from field
         */
        "optionLabelPath"?: string;
        /**
          * OptionValuePath referred from field
         */
        "optionValuePath"?: string;
        /**
          * Options to display
         */
        "options"?: any[];
        /**
          * Specifies the select field as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.
         */
        "required"?: boolean;
        /**
          * Function to return initialValues
         */
        "selectProps"?: any;
        /**
          * Theme based on which the list box is styled.
         */
        "state"?: 'normal' | 'warning' | 'error';
        /**
          * Initial value from first level choices
         */
        "value"?: string;
        /**
          * Warning text displayed below the text box.
         */
        "warningText"?: string;
    }
    interface FwPagination {
        /**
          * Aria Label to be used for the button group.
         */
        "buttonGroupLabel"?: string;
        /**
          * hides page numbers in standard pagination variant. Defaults to false. Works only with `standard` variant.
         */
        "hidePageNumbers"?: boolean;
        /**
          * Indicates if the records in current page are being fetched.
         */
        "isLoading"?: boolean;
        /**
          * represents the number of pages to be shown on both the margins. Defaults to 1. Works only with `standard` variant.
         */
        "marginPagesDisplayed"?: number;
        /**
          * Aria Label to be used for next button.
         */
        "nextButtonLabel"?: string;
        /**
          * Triggered when previous, next or page button is clicked.
         */
        "onFwChange"?: (event: FwPaginationCustomEvent<any>) => void;
        /**
          * Triggered when per page is changed from the dropdown. Works only with `standard` variant.
         */
        "onFwPerPageChange"?: (event: FwPaginationCustomEvent<any>) => void;
        /**
          * The current page number.
         */
        "page"?: number;
        /**
          * represents the range of pages to be shown. Defaults to 4. Works only with `standard` variant.
         */
        "pageRangeDisplayed"?: number;
        /**
          * The number of records to be shown per page. Defaults to 10.
         */
        "perPage"?: number;
        /**
          * Specify the perPage options to be shown. Works only with `standard` variant.
         */
        "perPageOptions"?: number[];
        /**
          * Aria Label to be used for previous button.
         */
        "previousButtonLabel"?: string;
        /**
          * The total number of records. This is a mandatory parameter.
         */
        "total"?: number;
        /**
          * The variant of pagination to be displayed. Mini variant displays only previous and next buttons along with pagination information. Standard variant displays list of page numbers which can be selected along with previous and next buttons Defaults to 'mini'.
         */
        "variant"?: 'mini' | 'standard';
    }
    interface FwPill {
        /**
          * Theme based on which the pill is styled.
         */
        "color"?: 'blue' | 'red' | 'green' | 'yellow' | 'grey';
    }
    interface FwPopover {
        /**
          * Whether to focus on the element in popover-content slot on opening the dropdown.
         */
        "autoFocusOnContent"?: boolean;
        /**
          * The area that the popup will be checked for overflow relative to.
         */
        "boundary"?: HTMLElement;
        /**
          * Option to disable the popover animation on hide and show.
         */
        "disableTransition"?: boolean;
        /**
          * Distance defines the distance between the popover trigger and the popover content along y-axis.
         */
        "distance"?: string;
        /**
          * Alternative placement for popover if the default placement is not possible.
         */
        "fallbackPlacements"?: [PopoverPlacementType];
        /**
          * Option to determine if popover-content has a border.
         */
        "hasBorder"?: boolean;
        /**
          * Indicates the delay after which popover will be hidden.
         */
        "hideAfter"?: number;
        /**
          * Indicates whether popover contents should be hidden on pressing Tab.
         */
        "hideOnTab"?: boolean;
        /**
          * Option to prevent the tooltip from being clipped when the component is placed inside a container with `overflow: auto|hidden|scroll`.
         */
        "hoist"?: boolean;
        /**
          * Triggered whenever the popover contents is closed/hidden.
         */
        "onFwHide"?: (event: FwPopoverCustomEvent<any>) => void;
        /**
          * Triggered whenever the popover contents is open/displayed.
         */
        "onFwShow"?: (event: FwPopoverCustomEvent<any>) => void;
        /**
          * Placement of the popover content with respect to the popover trigger.
         */
        "placement"?: PopoverPlacementType;
        /**
          * Whether the popover-content width to be same as that of the popover-trigger.
         */
        "sameWidth"?: boolean;
        /**
          * Indicates the delay after which popover will be shown.
         */
        "showAfter"?: number;
        /**
          * Skidding defines the distance between the popover trigger and the popover content along x-axis.
         */
        "skidding"?: string;
        /**
          * The trigger event on which the popover-content is displayed. The available options are 'click' | 'manual' | 'hover', in case of 'manual' no trigger event will be set.
         */
        "trigger"?: PopoverTriggerType;
        /**
          * Variant defines the style of the popover-content.
         */
        "variant"?: 'select' | 'date-picker';
    }
    interface FwProgressLoader {
        /**
          * Adjust animation settings using easing (a CSS easing string). Default is `ease`
         */
        "easing"?: string;
        /**
          * Changes the minimum percentage used upon starting. Default is `0.08`
         */
        "minimum"?: number;
        /**
          * Specify a selector to change the parent container. Default is `body` Selector is accessed internally via document.querySelector method
         */
        "parent"?: string;
        /**
          * Show progress loader. Default `false`
         */
        "show"?: boolean;
        /**
          * Add speed (in ms). Default is `200`
         */
        "speed"?: number;
        /**
          * Use Custom markup. To keep the progress bar working, keep an element with class='bar' in there
         */
        "template"?: string;
        /**
          * Turn on/off the automatic incrementing behavior by setting this to false. Default is `true`
         */
        "trickle"?: boolean;
        /**
          * Adjust how often to trickle/increment, in ms. Default is `200`
         */
        "trickleSpeed"?: number;
    }
    interface FwRadio {
        /**
          * Sets the state to selected. If the attribute’s value is undefined, the value is set to false.
         */
        "checked"?: boolean;
        /**
          * Description to be displayed for the checkbox.
         */
        "description"?: string;
        /**
          * Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled"?: boolean;
        /**
          * @deprecated Use `description` instead. Label displayed on the interface, for the check box.
         */
        "label"?: string;
        /**
          * Name of the component, saved as part of form data.
         */
        "name"?: string;
        /**
          * Triggered when the radio button loses focus.
         */
        "onFwBlur"?: (event: FwRadioCustomEvent<any>) => void;
        /**
          * Triggered when the radio button is toggled.
         */
        "onFwChange"?: (event: FwRadioCustomEvent<any>) => void;
        /**
          * Triggered when the radio button in focus is cleared.
         */
        "onFwDeselect"?: (event: FwRadioCustomEvent<any>) => void;
        /**
          * Triggered when the radio button comes into focus.
         */
        "onFwFocus"?: (event: FwRadioCustomEvent<void>) => void;
        /**
          * /**   Triggered when the radio button in focus is selected.
         */
        "onFwSelect"?: (event: FwRadioCustomEvent<any>) => void;
        /**
          * Theme based on which the radio button is styled.
         */
        "state"?: 'normal' | 'error';
        /**
          * Identifier corresponding to the component, that is saved when the form data is saved.
         */
        "value"?: string;
    }
    interface FwRadioGroup {
        /**
          * If true, a radio group can be saved without selecting any option. If an option is selected, the selection can be cleared. If the attribute’s value is undefined, the value is set to false.
         */
        "allowEmpty"?: boolean;
        /**
          * Error text displayed below the radio group.
         */
        "errorText"?: string;
        /**
          * Hint text displayed below the radio group.
         */
        "hintText"?: string;
        /**
          * Label for the component
         */
        "label"?: string;
        /**
          * Name of the component, saved as part of form data.
         */
        "name"?: string;
        /**
          * Triggered when an option in the Radio Group is selected or deselected.
         */
        "onFwChange"?: (event: FwRadioGroupCustomEvent<any>) => void;
        /**
          * Indicates the direction of the radio buttons alignment, defaults to vertical alignment.
         */
        "orientation"?: 'row' | 'column';
        /**
          * Specifies the input radio group as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.
         */
        "required"?: boolean;
        /**
          * Theme based on which the radio group is styled.
         */
        "state"?: 'normal' | 'warning' | 'error';
        /**
          * Default option that is selected when the radio group is displayed on the interface. Must be a valid value corresponding to the fw-radio components used in the Radio Group.
         */
        "value"?: any | null;
        /**
          * Warning text displayed below the radio group.
         */
        "warningText"?: string;
    }
    interface FwSelect {
        /**
          * Whether clicking on the already selected option disables it.
         */
        "allowDeselect"?: boolean;
        /**
          * Describes the select's boundary HTMLElement
         */
        "boundary"?: HTMLElement;
        /**
          * Whether the arrow/caret should be shown in the select.
         */
        "caret"?: boolean;
        /**
          * Place a checkbox.
         */
        "checkbox"?: boolean;
        /**
          * Props to be passed for creatable select isCreatable: boolean - If true, select accepts user input that are not present as options and add them as options validateNewOption: (value) => boolean - If passed, this function will determine the error state for every new option entered. If return value is true, error state of the newly created option will be false and if return value is false, then the error state of the newly created option will be true. formatCreateLabel: (label) => string - Gets the label for the "create new ..." option in the menu. Current input value is provided as argument.
         */
        "creatableProps"?: { isCreatable: boolean; validateNewOption: (_value: any) => boolean; formatCreateLabel: (label: any) => string; };
        /**
          * Debounce timer for the search promise function.
         */
        "debounceTimer"?: number;
        /**
          * Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled"?: boolean;
        /**
          * Virtualize long list of elements in list options *Experimental*
         */
        "enableVirtualScroll"?: boolean;
        /**
          * Error text displayed below the text box.
         */
        "errorText"?: string;
        /**
          * Works only when 'enableVirtualScroll' is true. Estimated size of each item in the list box to ensure smooth-scrolling.
         */
        "estimatedSize"?: number;
        /**
          * Alternative placement for popover if the default placement is not possible.
         */
        "fallbackPlacements"?: [PopoverPlacementType];
        /**
          * If true, the user must select a value. The default value is not displayed.
         */
        "forceSelect"?: boolean;
        /**
          * Hint text displayed below the text box.
         */
        "hintText"?: string;
        /**
          * Option to prevent the select options from being clipped when the component is placed inside a container with `overflow: auto|hidden|scroll`.
         */
        "hoist"?: boolean;
        /**
          * Label displayed on the interface, for the component.
         */
        "label"?: string;
        /**
          * If the default label prop is not used, then use this prop to pass the id of the label.
         */
        "labelledBy"?: string;
        /**
          * Works with `multiple` enabled. Configures the maximum number of options that can be selected with a multi-select component.
         */
        "max"?: number;
        /**
          * Sets the max height of select with multiple options selected and displays a scroll when maxHeight value is exceeded
         */
        "maxHeight"?: string;
        /**
          * Enables selection of multiple options. If the attribute’s value is undefined, the value is set to false.
         */
        "multiple"?: boolean;
        /**
          * Name of the component, saved as part of form data.
         */
        "name"?: string;
        /**
          * Text to be displayed when there is no data available in the select.
         */
        "noDataText"?: string;
        /**
          * Default option to be shown if the option doesn't match the filterText.
         */
        "notFoundText"?: string;
        /**
          * Triggered when the list box loses focus.
         */
        "onFwBlur"?: (event: FwSelectCustomEvent<any>) => void;
        /**
          * Triggered when a value is selected or deselected from the list box options.
         */
        "onFwChange"?: (event: FwSelectCustomEvent<any>) => void;
        /**
          * Triggered when the list box comes into focus.
         */
        "onFwFocus"?: (event: FwSelectCustomEvent<any>) => void;
        /**
          * Key for determining the label for a given option
         */
        "optionLabelPath"?: string;
        /**
          * Key for determining the value for a given option
         */
        "optionValuePath"?: string;
        /**
          * The data for the select component, the options will be of type array of fw-select-options.
         */
        "options"?: any;
        /**
          * Placement of the options list with respect to select.
         */
        "optionsPlacement"?: PopoverPlacementType;
        /**
          * Standard is the default option without any graphics other options are icon and avatar which places either the icon or avatar at the beginning of the row. The props for the icon or avatar are passed as an object via the graphicsProps.
         */
        "optionsVariant"?: DropdownVariant;
        /**
          * Text displayed in the list box before an option is selected.
         */
        "placeholder"?: string | null;
        /**
          * If true, the user cannot modify the default value selected. If the attribute's value is undefined, the value is set to true.
         */
        "readonly"?: boolean;
        /**
          * Specifies the select field as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.
         */
        "required"?: boolean;
        /**
          * Whether the select width to be same as that of the options.
         */
        "sameWidth"?: boolean;
        /**
          * Filter function which takes in filterText and dataSource and return a Promise. Where filter text is the text to filter the value in dataSource array. The returned promise should contain the array of options to be displayed.
         */
        "search"?: any;
        /**
          * Allow to search for value. Default is true.
         */
        "searchable"?: boolean;
        /**
          * Array of the options that is displayed as the default selection, in the list box. Must be a valid option corresponding to the fw-select-option components used in Select.
         */
        "selectedOptions"?: any[];
        /**
          * Theme based on which the list box is styled.
         */
        "state"?: 'normal' | 'warning' | 'error';
        /**
          * Props to be passed for fw-tag components displayed in multi-select.
         */
        "tagProps"?: {};
        /**
          * The variant of tag to be used.
         */
        "tagVariant"?: TagVariant;
        /**
          * Type of option accepted as the input value. If a user tries to enter an option other than the specified type, the list is not populated.
         */
        "type"?: 'text' | 'number';
        /**
          * Value of the option that is displayed as the default selection, in the list box. Must be a valid value corresponding to the fw-select-option components used in Select.
         */
        "value"?: any;
        /**
          * The UI variant of the select to be used.
         */
        "variant"?: 'button' | 'standard' | 'mail' | 'search';
        /**
          * Warning text displayed below the text box.
         */
        "warningText"?: string;
    }
    interface FwSelectOption {
        /**
          * Whether clicking on the already selected option disables it.
         */
        "allowDeselect"?: boolean;
        /**
          * Whether clicking on option selects it.
         */
        "allowSelect"?: boolean;
        /**
          * Place a checkbox.
         */
        "checkbox"?: boolean;
        /**
          * Sets the state of the option to disabled. The selected option is disabled and greyed out. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled"?: boolean;
        /**
          * The props for the graphics variant. ex., icon props in case of graphicsType = 'icon'
         */
        "graphicsProps"?: any;
        /**
          * Used in grouped list, provides the group in which the option belongs
         */
        "groupName"?: string;
        /**
          * Hide tick mark icon
         */
        "hideTick"?: boolean;
        /**
          * States that the option is an HTML value. If the attribute's value is undefined, the value is set to true.
         */
        "html"?: boolean;
        /**
          * HTML content that is displayed as the option.
         */
        "htmlContent"?: string;
        /**
          * Third line text in conversation can be metaText additional details etc.
         */
        "metaText"?: MetaText;
        /**
          * Triggered when an option loses focus.
         */
        "onFwBlur"?: (event: FwSelectOptionCustomEvent<any>) => void;
        /**
          * Triggered when an option is focused.
         */
        "onFwFocus"?: (event: FwSelectOptionCustomEvent<any>) => void;
        /**
          * Triggered when an option is clicked when allowSelect is false.
         */
        "onFwSelectAttempted"?: (event: FwSelectOptionCustomEvent<any>) => void;
        /**
          * Triggered when an option is selected.
         */
        "onFwSelected"?: (event: FwSelectOptionCustomEvent<any>) => void;
        /**
          * Alternate text displayed on the interface, in place of the actual HTML content.
         */
        "optionText"?: string;
        /**
          * Sets the state of the option to selected. The selected option is highlighted and a check mark is displayed next to it. If the attribute’s value is undefined, the value is set to false.
         */
        "selected"?: boolean;
        /**
          * Second line text can be description etc.
         */
        "subText"?: string;
        /**
          * The text to be displayed in the option.
         */
        "text"?: string;
        /**
          * Value corresponding to the option, that is saved  when the form data is saved.
         */
        "value"?: string | number;
        /**
          * Standard is the default option without any graphics other options are icon and avatar which places either the icon or avatar at the beginning of the row. The props for the icon or avatar are passed as an object via the graphicsProps.
         */
        "variant"?: DropdownVariant;
    }
    interface FwSkeleton {
        /**
          * Number of rows of current skeleton type
         */
        "count"?: number;
        /**
          * Custom css styles (background/margins/width/height etc.)
          * @type {({[k: string]: string} | string)}
         */
        "customStyles"?: { [key: string]: string } | string;
        /**
          * Effect the skeleton will use.
         */
        "effect"?: 'pulse' | 'sheen' | 'none';
        /**
          * Height of the skeleton ex. 100px, 100%, auto etc.
         */
        "height"?: string;
        /**
          * MarginBottom of the skeleton ex. 10px, 0 etc.
         */
        "marginBottom"?: string;
        /**
          * Variant of the skeleton - circle or rectangle or text
         */
        "variant"?: 'circle' | 'rect' | 'text';
        /**
          * Width of the skeleton ex. 100px, 100%, auto etc.
         */
        "width"?: string;
    }
    interface FwSpinner {
        /**
          * Color in which the loader is displayed, specified as a standard CSS color.
         */
        "color"?: string;
        /**
          * Size of the loader.
         */
        "size"?: 'micro' | 'small' | 'medium' | 'large' | 'default';
    }
    interface FwTab {
        /**
          * Determines whether the tab is active.
         */
        "active"?: boolean;
        /**
          * Disables this tab
         */
        "disabled"?: boolean;
        /**
          * The name of the tab panel which this tab controls.
         */
        "panel"?: string;
        /**
          * Header for the tab to be displayed.
         */
        "tabHeader"?: string;
        /**
          * Unique name of the tab.
         */
        "tabName"?: string;
    }
    interface FwTabPanel {
        /**
          * If true sets the panel display to block, none otherwise.
         */
        "active"?: boolean;
        /**
          * The panel name.
         */
        "name"?: string;
    }
    interface FwTabs {
        /**
          * The index of the tab to be activated (Starts from 0)
         */
        "activeTabIndex"?: number;
        /**
          * The name of the tab to be activated. If present, will be taken as priority over `activeTabIndex`.
         */
        "activeTabName"?: string;
        /**
          * Describes the purpose of set of tabs.
         */
        "label"?: string;
        /**
          * Triggered when a the view switches to a new tab.
         */
        "onFwChange"?: (event: FwTabsCustomEvent<any>) => void;
        /**
          * The style of tab headers that needs to be displayed, box will display headers in a container.
         */
        "variant"?: 'box' | 'normal';
    }
    interface FwTag {
        /**
          * Whether the Tag can be closed.
         */
        "closable"?: boolean;
        /**
          * Sets the state of the tag to disabled. The close button is disabled. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled"?: boolean;
        /**
          * Whether the Tag is focusable.
         */
        "focusable"?: boolean;
        /**
          * The props need to be passed for the variant. If the variant is avatar then use this prop to send the props for the fw-avatar component.
         */
        "graphicsProps"?: {};
        /**
          * Index of tag in a group of tags
         */
        "index"?: string | number;
        /**
          * If true, tag will be focused
         */
        "isFocused"?: boolean;
        /**
          * Triggered when the tag is deselected.
         */
        "onFwClosed"?: (event: FwTagCustomEvent<any>) => void;
        /**
          * Truncate text with ellipsis when text overflows
         */
        "showEllipsisOnOverflow"?: boolean;
        /**
          * Theme based on which the tag is styled.
         */
        "state"?: TagState;
        /**
          * Display sub text in the tag component.
         */
        "subText"?: string;
        /**
          * Display text in the tag component.
         */
        "text"?: string;
        /**
          * Value associated with the tag component, that is saved when the form data is saved.
         */
        "value"?: string | number;
        /**
          * The variant of tag to be displayed.
         */
        "variant"?: TagVariant;
    }
    interface FwTextarea {
        /**
          * Width of the input box, specified as number of columns.
         */
        "cols"?: number;
        /**
          * Disables the text area on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled"?: boolean;
        /**
          * Error text displayed below the text box.
         */
        "errorText"?: string;
        /**
          * Hint text displayed below the text box.
         */
        "hintText"?: string;
        /**
          * Label displayed on the interface, for the component.
         */
        "label"?: string;
        /**
          * Max number of rows the textarea can create when user writes content greater than regular rows.
         */
        "maxRows"?: number;
        /**
          * Debounce timer for setting rows dynamically based on user input and maxRows, default is 200ms.
         */
        "maxRowsDebounceTimer"?: number;
        /**
          * Maximum number of characters a user can enter in the input box.
         */
        "maxlength"?: number;
        /**
          * Minimum number of characters a user must enter in the input box for the value to be valid.
         */
        "minlength"?: number;
        /**
          * Name of the component, saved as part of form data.
         */
        "name"?: string;
        /**
          * Triggered when the input box loses focus.
         */
        "onFwBlur"?: (event: FwTextareaCustomEvent<any>) => void;
        /**
          * Triggered when the input box comes into focus.
         */
        "onFwFocus"?: (event: FwTextareaCustomEvent<void>) => void;
        /**
          * Triggered when a value is entered in the input box.
         */
        "onFwInput"?: (event: FwTextareaCustomEvent<any>) => void;
        /**
          * Text displayed in the input box before a user enters a value.
         */
        "placeholder"?: string | null;
        /**
          * If true, the user cannot enter a value in the input box. If the attribute’s value is undefined, the value is set to false.
         */
        "readonly"?: boolean;
        /**
          * Specifies the input box as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.
         */
        "required"?: boolean;
        /**
          * Specifies the way in which the text area can be resized
         */
        "resize"?: 'none' | 'both' | 'horizontal' | 'vertical';
        /**
          * Height of the input box, specified as number of rows.
         */
        "rows"?: number;
        /**
          * Theme based on which the input box is styled.
         */
        "state"?: 'normal' | 'warning' | 'error';
        /**
          * Default value displayed in the input box.
         */
        "value"?: string | null;
        /**
          * Warning text displayed below the text box.
         */
        "warningText"?: string;
        /**
          * Type of text wrapping used by the input box. If the value is hard, the text in the textarea is wrapped (contains line breaks) when the form data is saved. If the value is soft, the text in the textarea is saved as a single line, when the form data is saved.
         */
        "wrap"?: 'soft' | 'hard';
    }
    interface FwTimepicker {
        /**
          * Whether clicking on the already selected option disables it.
         */
        "allowDeselect"?: boolean;
        /**
          * Whether the arrow/caret should be shown in the timepicker.
         */
        "caret"?: boolean;
        /**
          * Set true to disable the element
         */
        "disabled"?: boolean;
        /**
          * Error text displayed below the text box.
         */
        "errorText"?: string;
        /**
          * Format in which time values are populated in the list box. If the value is hh:mm a, the time values are in the 12-hour format. If the value is hh:mm, the time values are in the 24-hr format. The default value will be set based on the locale time format.
         */
        "format"?: string;
        /**
          * Hint text displayed below the text box.
         */
        "hintText"?: string;
        /**
          * Time interval between the values displayed in the list, specified in minutes.
         */
        "interval"?: number;
        /**
          * Label displayed on the interface, for the component.
         */
        "label"?: string;
        /**
          * Locale for which timePicker needs to be shown. Defaults to browser's current locale.
         */
        "locale"?: string;
        /**
          * Upper time-limit for the values displayed in the list. The default value will be set based on the locale time format.
         */
        "maxTime"?: string;
        /**
          * Lower time-limit for the values displayed in the list. The default value will be set based on the locale time format.
         */
        "minTime"?: string;
        /**
          * Name of the component, saved as part of form data.
         */
        "name"?: string;
        /**
          * Triggered when the list box loses focus.
         */
        "onFwBlur"?: (event: FwTimepickerCustomEvent<any>) => void;
        /**
          * Triggered when a value is selected or deselected from the list box options.
         */
        "onFwChange"?: (event: FwTimepickerCustomEvent<any>) => void;
        /**
          * Triggered when the list box comes into focus.
         */
        "onFwFocus"?: (event: FwTimepickerCustomEvent<any>) => void;
        /**
          * Placement of the options list with respect to timepicker.
         */
        "optionsPlacement"?: PopoverPlacementType;
        /**
          * Text displayed in the select before an option is selected.
         */
        "placeholder"?: string | null;
        /**
          * If true, the user cannot type in the text input
         */
        "readonly"?: boolean;
        /**
          * Specifies the input box as a mandatory field and displays an asterisk next to the label. If the attribute's value is undefined, the value is set to false.
         */
        "required"?: boolean;
        /**
          * Whether the dropdown should be same width as that of the input.
         */
        "sameWidth"?: boolean;
        /**
          * Theme based on which the input of the timepicker is styled.
         */
        "state"?: 'normal' | 'warning' | 'error';
        /**
          * The Time value. The value is always in the non meridian format i.e., HH:mm
         */
        "value"?: string;
        /**
          * Warning text displayed below the text box.
         */
        "warningText"?: string;
    }
    interface FwToast {
        /**
          * The Content of the action link
         */
        "actionLinkText"?: string;
        /**
          * The content to be displayed in toast
         */
        "content"?: string;
        /**
          * Pause the toast from hiding on mouse hover
         */
        "pauseOnHover"?: boolean;
        /**
          * position of the toast notification in screen
         */
        "position"?: 'top-center' | 'top-left' | 'top-right';
        /**
          * Prevent rendering the duplicate toasters at the same time
         */
        "shouldPreventDuplicates"?: boolean;
        /**
          * won't close automatically
         */
        "sticky"?: boolean;
        /**
          * Time duration of the toast visibility
         */
        "timeout"?: number;
        /**
          * Type of the toast - success,failure, warning, inprogress
         */
        "type"?: 'success' | 'error' | 'warning' | 'inprogress';
    }
    interface FwToastMessage {
        /**
          * The Content of the action link
         */
        "actionLinkText"?: string;
        /**
          * The content to be displayed in toast
         */
        "content"?: string;
        /**
          * Triggered when the action link clicked.
         */
        "onFwLinkClick"?: (event: FwToastMessageCustomEvent<any>) => void;
        /**
          * Triggered on closing the toast message. This event gets used by the parent container to remove the toast message from itself
         */
        "onFwRemoveToast"?: (event: FwToastMessageCustomEvent<any>) => void;
        /**
          * visibility prop of toast message
         */
        "open"?: boolean;
        /**
          * Pause the toast from hiding on mouse hover
         */
        "pauseOnHover"?: boolean;
        /**
          * won't close automatically
         */
        "sticky"?: boolean;
        /**
          * Time duration of the toast visibility
         */
        "timeout"?: number;
        /**
          * Type of the toast - success,failure, warning, inprogress
         */
        "type"?: 'success' | 'error' | 'warning' | 'inprogress';
    }
    interface FwToggle {
        /**
          * Sets the selected state as the default state. If the attribute’s value is undefined, the value is set to false.
         */
        "checked"?: boolean;
        /**
          * Specifies whether to disable the control on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled"?: boolean;
        /**
          * Label for the component, that can be used by screen readers.
         */
        "label"?: string;
        /**
          * Name of the component, saved as part of the form data.
         */
        "name"?: string;
        /**
          * Triggered when the input control is selected or deselected.
         */
        "onFwChange"?: (event: FwToggleCustomEvent<any>) => void;
        /**
          * Specifies whether to show the check and cancel icons on toggle button. If the attribute’s value is undefined, the value is set to true.
         */
        "showIcon"?: boolean;
        /**
          * Size of the input control.
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface FwToggleGroup {
        /**
          * Label for the component, that can be used by screen readers.
         */
        "label"?: string;
        /**
          * Boolean value to allow multiple selection or single child selection
         */
        "multiple"?: boolean;
        /**
          * Name of the component, saved as part of form data.
         */
        "name"?: string;
        /**
          * Triggered when an option in the Toggle Group is selected or deselected.
         */
        "onFwChange"?: (event: FwToggleGroupCustomEvent<any>) => void;
        /**
          * Selected items to be shown - stored in array format - if property "multiple" is set to false, this will always be a single value array
         */
        "value"?: any;
    }
    interface FwToggleGroupButton {
        /**
          * sets the default base class name and the rest of the class names for the other states are automatically appended to this
         */
        "baseClassName"?: string;
        /**
          * Label displayed as description in the card.
         */
        "description"?: string;
        /**
          * Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled"?: boolean;
        /**
          * Label displayed as header in the card.
         */
        "header"?: string;
        /**
          * index attached inside the parent group component
         */
        "index"?: number;
        /**
          * Enables the component to be used as a part of multi selection group
         */
        "isCheckbox"?: boolean;
        /**
          * Name of the component, saved as part of the form data.
         */
        "name"?: string;
        /**
          * Triggered when the card in focus is selected.
         */
        "onFwToggled"?: (event: FwToggleGroupButtonCustomEvent<any>) => void;
        /**
          * Enables the component to be used as a toggle button or just to be used as a normal button
         */
        "selectable"?: boolean;
        /**
          * Sets the state to selected. If the attribute’s value is undefined, the value is set to false.
         */
        "selected"?: boolean;
        /**
          * sets the type of the button
         */
        "type"?: 'card' | 'icon' | 'custom';
        /**
          * Identifier corresponding to the component, that is saved when the form data is saved.
         */
        "value"?: string;
    }
    interface FwTooltip {
        /**
          * Content of the tooltip.
         */
        "content"?: string;
        /**
          * Distance defines the distance between the popover trigger and the popover content along y-axis.
         */
        "distance"?: string;
        /**
          * Alternative placement for popover if the default placement is not possible.
         */
        "fallbackPlacements"?: [PopoverPlacementType];
        /**
          * Header of the tooltip.
         */
        "header"?: string;
        /**
          * Option to prevent the tooltip from being clipped when the component is placed inside a container with `overflow: auto|hidden|scroll`.
         */
        "hoist"?: boolean;
        /**
          * Placement of the popover content with respect to the popover trigger.
         */
        "placement"?: PopoverPlacementType;
        /**
          * The trigger event on which the popover-content is displayed. The available options are 'click' | 'manual' | 'hover', in case of 'manual' no trigger event will be set.
         */
        "trigger"?: PopoverTriggerType;
    }
    interface IntrinsicElements {
        "fw-accordion": FwAccordion;
        "fw-accordion-body": FwAccordionBody;
        "fw-accordion-title": FwAccordionTitle;
        "fw-avatar": FwAvatar;
        "fw-button": FwButton;
        "fw-button-group": FwButtonGroup;
        "fw-checkbox": FwCheckbox;
        "fw-country-phone": FwCountryPhone;
        "fw-custom-cell-anchor": FwCustomCellAnchor;
        "fw-custom-cell-icon": FwCustomCellIcon;
        "fw-custom-cell-paragraph": FwCustomCellParagraph;
        "fw-custom-cell-user": FwCustomCellUser;
        "fw-data-table": FwDataTable;
        "fw-datepicker": FwDatepicker;
        "fw-drag-container": FwDragContainer;
        "fw-drag-item": FwDragItem;
        "fw-file-2": FwFile2;
        "fw-file-uploader": FwFileUploader;
        "fw-file-uploader-2": FwFileUploader2;
        "fw-file-uploader-file": FwFileUploaderFile;
        "fw-file-uploader-progress": FwFileUploaderProgress;
        "fw-form": FwForm;
        "fw-form-control": FwFormControl;
        "fw-format-date": FwFormatDate;
        "fw-format-number": FwFormatNumber;
        "fw-icon": FwIcon;
        "fw-inline-message": FwInlineMessage;
        "fw-input": FwInput;
        "fw-kebab-menu": FwKebabMenu;
        "fw-label": FwLabel;
        "fw-list-options": FwListOptions;
        "fw-menu": FwMenu;
        "fw-menu-item": FwMenuItem;
        "fw-modal": FwModal;
        "fw-modal-content": FwModalContent;
        "fw-modal-footer": FwModalFooter;
        "fw-modal-title": FwModalTitle;
        "fw-nested-node": FwNestedNode;
        "fw-nested-select": FwNestedSelect;
        "fw-pagination": FwPagination;
        "fw-pill": FwPill;
        "fw-popover": FwPopover;
        "fw-progress-loader": FwProgressLoader;
        "fw-radio": FwRadio;
        "fw-radio-group": FwRadioGroup;
        "fw-select": FwSelect;
        "fw-select-option": FwSelectOption;
        "fw-skeleton": FwSkeleton;
        "fw-spinner": FwSpinner;
        "fw-tab": FwTab;
        "fw-tab-panel": FwTabPanel;
        "fw-tabs": FwTabs;
        "fw-tag": FwTag;
        "fw-textarea": FwTextarea;
        "fw-timepicker": FwTimepicker;
        "fw-toast": FwToast;
        "fw-toast-message": FwToastMessage;
        "fw-toggle": FwToggle;
        "fw-toggle-group": FwToggleGroup;
        "fw-toggle-group-button": FwToggleGroupButton;
        "fw-tooltip": FwTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "fw-accordion": LocalJSX.FwAccordion & JSXBase.HTMLAttributes<HTMLFwAccordionElement>;
            "fw-accordion-body": LocalJSX.FwAccordionBody & JSXBase.HTMLAttributes<HTMLFwAccordionBodyElement>;
            "fw-accordion-title": LocalJSX.FwAccordionTitle & JSXBase.HTMLAttributes<HTMLFwAccordionTitleElement>;
            "fw-avatar": LocalJSX.FwAvatar & JSXBase.HTMLAttributes<HTMLFwAvatarElement>;
            "fw-button": LocalJSX.FwButton & JSXBase.HTMLAttributes<HTMLFwButtonElement>;
            "fw-button-group": LocalJSX.FwButtonGroup & JSXBase.HTMLAttributes<HTMLFwButtonGroupElement>;
            "fw-checkbox": LocalJSX.FwCheckbox & JSXBase.HTMLAttributes<HTMLFwCheckboxElement>;
            "fw-country-phone": LocalJSX.FwCountryPhone & JSXBase.HTMLAttributes<HTMLFwCountryPhoneElement>;
            "fw-custom-cell-anchor": LocalJSX.FwCustomCellAnchor & JSXBase.HTMLAttributes<HTMLFwCustomCellAnchorElement>;
            "fw-custom-cell-icon": LocalJSX.FwCustomCellIcon & JSXBase.HTMLAttributes<HTMLFwCustomCellIconElement>;
            "fw-custom-cell-paragraph": LocalJSX.FwCustomCellParagraph & JSXBase.HTMLAttributes<HTMLFwCustomCellParagraphElement>;
            "fw-custom-cell-user": LocalJSX.FwCustomCellUser & JSXBase.HTMLAttributes<HTMLFwCustomCellUserElement>;
            "fw-data-table": LocalJSX.FwDataTable & JSXBase.HTMLAttributes<HTMLFwDataTableElement>;
            "fw-datepicker": LocalJSX.FwDatepicker & JSXBase.HTMLAttributes<HTMLFwDatepickerElement>;
            "fw-drag-container": LocalJSX.FwDragContainer & JSXBase.HTMLAttributes<HTMLFwDragContainerElement>;
            "fw-drag-item": LocalJSX.FwDragItem & JSXBase.HTMLAttributes<HTMLFwDragItemElement>;
            "fw-file-2": LocalJSX.FwFile2 & JSXBase.HTMLAttributes<HTMLFwFile2Element>;
            "fw-file-uploader": LocalJSX.FwFileUploader & JSXBase.HTMLAttributes<HTMLFwFileUploaderElement>;
            "fw-file-uploader-2": LocalJSX.FwFileUploader2 & JSXBase.HTMLAttributes<HTMLFwFileUploader2Element>;
            "fw-file-uploader-file": LocalJSX.FwFileUploaderFile & JSXBase.HTMLAttributes<HTMLFwFileUploaderFileElement>;
            "fw-file-uploader-progress": LocalJSX.FwFileUploaderProgress & JSXBase.HTMLAttributes<HTMLFwFileUploaderProgressElement>;
            "fw-form": LocalJSX.FwForm & JSXBase.HTMLAttributes<HTMLFwFormElement>;
            "fw-form-control": LocalJSX.FwFormControl & JSXBase.HTMLAttributes<HTMLFwFormControlElement>;
            "fw-format-date": LocalJSX.FwFormatDate & JSXBase.HTMLAttributes<HTMLFwFormatDateElement>;
            "fw-format-number": LocalJSX.FwFormatNumber & JSXBase.HTMLAttributes<HTMLFwFormatNumberElement>;
            "fw-icon": LocalJSX.FwIcon & JSXBase.HTMLAttributes<HTMLFwIconElement>;
            "fw-inline-message": LocalJSX.FwInlineMessage & JSXBase.HTMLAttributes<HTMLFwInlineMessageElement>;
            "fw-input": LocalJSX.FwInput & JSXBase.HTMLAttributes<HTMLFwInputElement>;
            "fw-kebab-menu": LocalJSX.FwKebabMenu & JSXBase.HTMLAttributes<HTMLFwKebabMenuElement>;
            "fw-label": LocalJSX.FwLabel & JSXBase.HTMLAttributes<HTMLFwLabelElement>;
            "fw-list-options": LocalJSX.FwListOptions & JSXBase.HTMLAttributes<HTMLFwListOptionsElement>;
            "fw-menu": LocalJSX.FwMenu & JSXBase.HTMLAttributes<HTMLFwMenuElement>;
            "fw-menu-item": LocalJSX.FwMenuItem & JSXBase.HTMLAttributes<HTMLFwMenuItemElement>;
            "fw-modal": LocalJSX.FwModal & JSXBase.HTMLAttributes<HTMLFwModalElement>;
            "fw-modal-content": LocalJSX.FwModalContent & JSXBase.HTMLAttributes<HTMLFwModalContentElement>;
            "fw-modal-footer": LocalJSX.FwModalFooter & JSXBase.HTMLAttributes<HTMLFwModalFooterElement>;
            "fw-modal-title": LocalJSX.FwModalTitle & JSXBase.HTMLAttributes<HTMLFwModalTitleElement>;
            "fw-nested-node": LocalJSX.FwNestedNode & JSXBase.HTMLAttributes<HTMLFwNestedNodeElement>;
            "fw-nested-select": LocalJSX.FwNestedSelect & JSXBase.HTMLAttributes<HTMLFwNestedSelectElement>;
            "fw-pagination": LocalJSX.FwPagination & JSXBase.HTMLAttributes<HTMLFwPaginationElement>;
            "fw-pill": LocalJSX.FwPill & JSXBase.HTMLAttributes<HTMLFwPillElement>;
            "fw-popover": LocalJSX.FwPopover & JSXBase.HTMLAttributes<HTMLFwPopoverElement>;
            "fw-progress-loader": LocalJSX.FwProgressLoader & JSXBase.HTMLAttributes<HTMLFwProgressLoaderElement>;
            "fw-radio": LocalJSX.FwRadio & JSXBase.HTMLAttributes<HTMLFwRadioElement>;
            "fw-radio-group": LocalJSX.FwRadioGroup & JSXBase.HTMLAttributes<HTMLFwRadioGroupElement>;
            "fw-select": LocalJSX.FwSelect & JSXBase.HTMLAttributes<HTMLFwSelectElement>;
            "fw-select-option": LocalJSX.FwSelectOption & JSXBase.HTMLAttributes<HTMLFwSelectOptionElement>;
            "fw-skeleton": LocalJSX.FwSkeleton & JSXBase.HTMLAttributes<HTMLFwSkeletonElement>;
            "fw-spinner": LocalJSX.FwSpinner & JSXBase.HTMLAttributes<HTMLFwSpinnerElement>;
            "fw-tab": LocalJSX.FwTab & JSXBase.HTMLAttributes<HTMLFwTabElement>;
            "fw-tab-panel": LocalJSX.FwTabPanel & JSXBase.HTMLAttributes<HTMLFwTabPanelElement>;
            "fw-tabs": LocalJSX.FwTabs & JSXBase.HTMLAttributes<HTMLFwTabsElement>;
            "fw-tag": LocalJSX.FwTag & JSXBase.HTMLAttributes<HTMLFwTagElement>;
            "fw-textarea": LocalJSX.FwTextarea & JSXBase.HTMLAttributes<HTMLFwTextareaElement>;
            "fw-timepicker": LocalJSX.FwTimepicker & JSXBase.HTMLAttributes<HTMLFwTimepickerElement>;
            "fw-toast": LocalJSX.FwToast & JSXBase.HTMLAttributes<HTMLFwToastElement>;
            "fw-toast-message": LocalJSX.FwToastMessage & JSXBase.HTMLAttributes<HTMLFwToastMessageElement>;
            "fw-toggle": LocalJSX.FwToggle & JSXBase.HTMLAttributes<HTMLFwToggleElement>;
            "fw-toggle-group": LocalJSX.FwToggleGroup & JSXBase.HTMLAttributes<HTMLFwToggleGroupElement>;
            "fw-toggle-group-button": LocalJSX.FwToggleGroupButton & JSXBase.HTMLAttributes<HTMLFwToggleGroupButtonElement>;
            "fw-tooltip": LocalJSX.FwTooltip & JSXBase.HTMLAttributes<HTMLFwTooltipElement>;
        }
    }
}
